{
	"nodes":[
		{"id":"eb94654c19f85af2","type":"text","text":"# Docker compose \nIt is a tool for defining and running multi-container Docker application\n\n# Creating Docker network\nAllow container to communicate with each other and with the external world\n\n1. `docker network create mongo-network`\n\t1. where `mongo-network` is network name\n2. `docker network ls`\n\n# Running mongo container\nNOTE : Follow the mongo image doc on docker hub to run mongo container using mongo image \n\n1. `docker run -d \\` press enter then\n2. `-p 27017:27017 \\` binding container port to host machine port\n3. `-e MONGO_INITDB_ROOT_USERNAME=admin \\`\n4. `-e MONGO_INITDB_ROOT_PASSWORD=my_password \\`\n5. `--network mongo-network \\` assigning network\n6. `--name mongodb \\` defining container name\n7. `mongo` which is image name \n\n \n NOTE: also whole `1 to 7` is single command i just broke it for simplicity\n\n8. `docker ps` to see running container\n","x":-700,"y":-240,"width":760,"height":760,"color":"1"},
		{"id":"b6ac9e989ceea429","type":"text","text":"\n# Running mongo-express container\nNOTE : Follow the mongo-express image doc on docker hub to run mongo-express container using mongo-express image \n\n1. `docker run -d \\` press enter then\n2. `-p 8081:8081 \\` binding container port to host machine port\n3. `-e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \\` here passing environmental variable\n4. `-e ME_CONFIG_MONGODB_ADMINPASSWORD=my_password \\`\n5. `-e ME_CONFIG_MONGODB_SERVER=mongodb \\` here giving container name which we gave in previous step\n 6. `--network mongo-network \\` assigning network\n7. `--name mongo-express \\` defining container name\n8. `mongo-express` which is image name \n\n \n NOTE: also whole `1 to 7` is single command i just broke it for simplicity\n\n## Now,\nbecause we bind the mongo-server port on `8081` go to browser and type on URL `localhost:8081`\nit will ask for name and password\n\n1. run `docker logs container_id_of_mongo-express` press enter it will give you the password and name\n","x":80,"y":-240,"width":880,"height":760,"color":"5"},
		{"id":"251d9d6be2a6858a","type":"text","text":"Step 2","x":590,"y":-325,"width":250,"height":60,"color":"3"},
		{"id":"a9ace23cad6a3314","type":"text","text":"Step 1","x":-700,"y":-325,"width":250,"height":60,"color":"3"},
		{"id":"d11a3f76ca8444f4","type":"text","text":"`my_compose.yml` is the file name.\n\n\n```\nversion: '3'\nservices:\n\tmy-app:\n\t\tbuild: .\n\t\tport:\n\t\t\t- 3000:3000\n\t\tenvironment:\n\t\t\t- MONGO_INITDB_USERNAME: ${MONGO_ADMIN_USER}\n\t\t\t- MONGO_INITDB_PWD: ${MONGO_ADMIN_PWD}\n\t\tsecrets: \n\t\t\t- my_secret_123\n\tmongodb: \n\t\timage: mongo\n\t\tport: \n\t\t\t- 27017:27017\n\t\tenvironment:\n\t\t\t- MONGO_INITDB_ROOT_USERNAME: admin\n\t\t\t- MONGO_INITDB_ROOT_PASSWORD: password\n\t\tvolumes:\n\t\t\t- my-volume:/var/lib/mysql/data\n\tmongo-express:\n\t\timage: mongo-express\n\t\tport: \n\t\t\t- 8080:8081\n\t\tenvironment:\n\t\t\t- ME_CONFIG_MONGODB_ADMINUSERNAME: admin\n\t\t\t- ME_CONFIG_MONGODB_ADMINPASSWORD: password\n\t\t\t- ME_CONFIG_MONGODB_SERVER: mongodb\n\t\tdepends_on:\n\t\t\t- \"mongodb\"\nvolumes:\n\tmy-volume:\n\t\tdriver: local\n```\n\n```\nNOTE: my-volume:/var/lib/mysql/data here,\n\n/var/lib/mysql/data container volume path is different for different image like for \n1. mongodb it is /data/db\n2. postgresql it is /var/lib/postgresql/data\n```\n\n\n```\nNOTE: depends_on attribute is used when one container is depends on another container\n\ndepends_on:\n\t- \"mongodb\"\n\nHere depends_on attribute will wait till the mongodb container completely up and running then it starts to create or run mongo-server container\n\n```","x":-280,"y":620,"width":800,"height":1320,"color":"5"},
		{"id":"15d8d5816f87a95d","type":"text","text":"# Docker compose","x":-110,"y":-340,"width":340,"height":75,"color":"3"},
		{"id":"196633fe37796ed9","type":"text","text":"Please look the indentation we write docker compose like this only\nIMPORTANT: \n1. `mongodb` is first container name\n2. `mongo-express` is second container name\n\nalso we do not need to mention the network connection as we do using command line `--net mongo-network \\` Docker compose automatically made the network connection between two container and also delete automatically made network connection on stopping the container\n\n# How to start and stop docker-compose container\n1. `docker-compose -f <file-name> up`\n\t1. `docker-compose -f my_compose.yml up` to start the container\n\t2. `docker-compose -f my_compose.yml up -d` to start the container in de-attached mode\n\t3. `docker-compose --project-name my-suffix -f my_compose.yml up -d`\n\t\t1. Here `--project-name` is used to override the suffix before container name\n2. `docker-compose -f my_compose.yml down` to stop the container\n\nHere, using `down` command removes the containers and virtual networks completely so if we do not want that then we should use `stop` instead of `down`\n\n1. `docker-compose -f my_compose.yml stop` to stop the container\n2. `docker ps -a` you will see the containers in exited state\n\nsame way instead of `up` you can use `start`\n1. `docker-compose -f my_compose.yml start -d` to start the container in de-attached mode","x":620,"y":740,"width":936,"height":740,"color":"1"},
		{"id":"4fa5d0674b3741fb","x":-960,"y":680,"width":620,"height":1020,"color":"2","type":"text","text":"```\nmy-app:\n\tbuild: .\n\tport:\n\t\t- 3000:3000\n\tenvironment:\n\t\t- MONGO_INITDB_USERNAME=admin\n\t\t- MONGO_INITDB_PWD=password\n```\n\nHere we are building image locally inside docker-compose file and `build: .` meaning it is looking for `Dockerfile` inside the application because `Dockerfile` consist all the application package and containers configuration\n\n#### Also,\n\n```\nenvironment:\n\t- MONGO_INITDB_USERNAME: ${MONGO_ADMIN_USER}\n\t- MONGO_INITDB_PWD: ${MONGO_ADMIN_PWD}\n```\n\nHere `${MONGO_ADMIN_USER}` is variable name passed from host machine for security reason\n\n##### How to set variable by the way\n\n```\n1. export MONGO_ADMIN_USER=admin\n2. export MONGO_ADMIN_PWD=password\n```\n\n#### Also, \nSometimes env variable could not be the safe method so we can use -->\n\n```\nsecrets:\n\t- my-secreat-123\n```"},
		{"id":"ca1816644129d6ea","x":-840,"y":-600,"width":620,"height":240,"color":"4","type":"text","text":"# How to Push images on docker-hub\n\n```\n1. echo password | docker login -u USERNAME --password-stdin\n2. docker build -t dockerhub-repository-name:1.0 \n3. docker push dockerhub-repository-name:1.0\n```\n\nNOTE : `password` is passed as variable for `--password-stdin` attribute"}
	],
	"edges":[
		{"id":"28da48e35ccc8c44","fromNode":"eb94654c19f85af2","fromSide":"bottom","toNode":"d11a3f76ca8444f4","toSide":"top","color":"4","label":"conversion"},
		{"id":"8f06fafbfee43502","fromNode":"b6ac9e989ceea429","fromSide":"bottom","toNode":"d11a3f76ca8444f4","toSide":"top","color":"4","label":"conversion"},
		{"id":"e1da1a693cf9f48c","fromNode":"d11a3f76ca8444f4","fromSide":"right","toNode":"196633fe37796ed9","toSide":"left"}
	]
}