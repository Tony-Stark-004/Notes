{
	"nodes":[
		{"id":"ad6801ae172c1b12","type":"text","text":"# Docker revision","x":-140,"y":-360,"width":280,"height":63,"color":"3"},
		{"id":"a42e679da23ceb8f","type":"text","text":"# Dockcer \n\n1. `docker run postgres:9.6`\n\t1. This command will run and start container having postgre image of version 9.6 also it will check whether image is present locally if not then it will pull it from docker hub.\n2. `dokcer ps`\n\t1. used to see running container\n\n\n","x":-660,"y":-620,"width":800,"height":240},
		{"id":"3c8bb001d67922a6","type":"text","text":"# Container \nRuntime environment for docker for docker image\n\n1. `dokcer pull <Image-name>`\n\t1. `docker pull redis` it pulls image docker hub by default\n2. `dokcer images` \n\t1. give the images present locally\n3. `dokcer run <image-name>`\n\t1. `docker run redis` it will run and start container \n\t2. `run` command start the container in attached mode. When we press `ctlr + c` then it stopped the container as well\n4. `dokcer ps`\n\t1. give all running container\n5. `docker run -d redis` \n\t1. It will start container in de-attached mode means on pressing `ctrl+c` wont stop the container\n6. `dokcer stop <container-id>`\n\t1. will stop the container gracefully\n7. `dokcer start <container-id>`\n\t1. will start the container\n8. `docker ps -a`\n\t1. will give you all container whether it is in running or stop state","x":-660,"y":-280,"width":800,"height":660,"color":"5"},
		{"id":"932ca9be27726ec5","type":"text","text":"# Port binding between container and host\nPort binding meaning mapping port of container with host port so that we can communicate with container\n1. `dokcer run -p 6000:6379 -d <image-name>`\n\t1. `docker run -p 6000:6379 -d redis`\n\t2. here `6000` is host port and `6379` is container port and `-d` meaning de-attach mode\n\n### let's map second container\n\n1. `dokcer run -p 6000:6379 -d redis:4.0`\n\t1. will give error because host port`6000` is already used for container `redis`\n2. `docker run -p 6001:6379 -d redis:4.0`\n\t1. This is mapped to host port `6001`\n\n\nNOTE : Because docker container is isolated so same image can have same port in different container ex : `redis` container and `redis:4.0` container both are running on port `6379`","x":160,"y":-280,"width":800,"height":520,"color":"5"},
		{"id":"4794c64edfba990d","type":"text","text":"# Container Debugging\n\n1. `dokcer logs <container-id>`\n\n# Custom docker container name\n\n1. `docker run -d -p 6000:6379 --name redis-old redis:4.0`\n\t1. `--name <custom-container-name>` is used to give custom container name\n2. `dokcer logs redis-older`\n\n# exec command\n`exec -it` command allow user to go inside docker container and see the files and directory \n\n1. `dokcer exec -it <container-id> /bin/bash` it will let you inside the container with `bash-hell`\n\t1. `root@<container-id>:/data# pwd` this you can run and debug\n\t2. type `exit` to come out of container and terminal\n","x":160,"y":260,"width":800,"height":560,"color":"4"},
		{"id":"023e148000d8ba9a","type":"text","text":"# Docker Network\n\n1. `dokcer network ls`\n\t1. will give you the list of networks present \n2. `docker network create mongo-network`\n\n# Running container using the docker network\n\n#### Running mongo container\n1. `dokcer run -d \\`\n2. `-p 27017:27017 \\`\n3. `-e MONGO_INITDB_ROOT_USERNAME=admin \\`\n4. `-e MONGO_INITDB_ROOT_PASSWORD=password \\`\n5. `--name mongodb \\`\n6. `--net mongo-network \\`\n7. `mongo`\n\n\nNOTE: step 1 to 7 are single command. we are setting environment variable using `-e` giving container name using \n`--name` and network using `--net` also we run the container in de-attached mode also `mongo` is image name\n\n#### Running mongo-express container\n1. `dokcer run -d \\`\n2. `-p 8081:8081 \\`\n3. `-e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \\` we gave username as `admin` see above\n4. `-e ME_CONFIG_MONGODB_ADMINPASSWORD=password \\` and password was `password`\n5.  `-e ME_CONFIG_MONGODB_SERVER=mongodb \\` here giving container name which is `mongodb`\n6. `--name mongodb-express \\`\n7. `--net mongo-network \\`\n8. `mongo-express`\n\nafter that run `localhost:8081` in you browser\n# Connecting Nodejs with database\n\n1.  So connect mongoDB normally on backend as you do and mongoDB connection string would be `localhost:27017` because we bind port of container `27017` to host port `27017`\n\nAlso we can log \n1. `dokcer logs mongdb | tail` or `docker logs mongodb -f` here we seeing log of `mongodb container`\n","x":1055,"y":-280,"width":925,"height":1180,"color":"1"},
		{"id":"335e25406b3b18c3","type":"text","text":"# Dokcer network","x":1280,"y":-380,"width":300,"height":64,"color":"3"},
		{"id":"3c67938b0a342d14","type":"text","text":"# Docker compose","x":2220,"y":-310,"width":340,"height":60,"color":"3"},
		{"id":"7f16943fd9e15f1a","type":"text","text":"# Docker compose\nDocker compose is scripting way to write docker commands and its file extension is `.yml`\n\nFor Example : let's convert previous mongodb and mongo-express container using docker compose\n\n#### Running mongo container\n1. `dokcer run -d \\`\n2. `-p 27017:27017 \\`\n3. `-e MONGO_INITDB_ROOT_USERNAME=admin \\`\n4. `-e MONGO_INITDB_ROOT_PASSWORD=password \\`\n5. `--name mongodb \\`\n6. `--net mongo-network \\`\n7. `mongo`\n\nLet's convert it using docker compose\n","x":2040,"y":-160,"width":480,"height":538},
		{"id":"a1c4126c3a31a921","type":"text","text":"`my_compose.yml` is the file name.\n\n\n```\nversion: '3'\nservices: \n\tmongodb: \n\t\timage: mongo\n\t\tport: \n\t\t\t- 27017:27017\n\t\tenvironment:\n\t\t\t- MONGO_INITDB_ROOT_USERNAME: admin\n\t\t\t- MONGO_INITDB_ROOT_PASSWORD: password\n\t\tvolumes:\n\t\t\t- my-volume:/var/lib/mysql/data\n\tmongo-express:\n\t\timage: mongo-express\n\t\tport: \n\t\t\t- 8080:8081\n\t\tenvironment:\n\t\t\t- ME_CONFIG_MONGODB_ADMINUSERNAME: admin\n\t\t\t- ME_CONFIG_MONGODB_ADMINPASSWORD: password\n\t\t\t- ME_CONFIG_MONGODB_SERVER: mongodb\nvolumes:\n\tmy-volume:\n\t\tdriver: local\n```\n\nPlease look the indentation we write docker compose like this only\nIMPORTANT: \n1. `mongodb` is first container name\n2. `mongo-express` is second container name\n\nalso we do not need to mention the network connection as we do using command line `--net mongo-network \\` Docker compose automatically made the network connection between two container and also delete automatically made network connection on stopping the container\n\n# How to start and stop docker-compose container\n1. `docker-compose -f <file-name> up`\n\t1. `docker-compose -f my_compose.yml up` to start the container\n\t2. `docker-compose -f my_compose.yml up -d` to start the container in de-attached mode\n2. `docker-compose -f my_compose.yml down` to stop the container\n\n\nNOTE : \n```\nvolumes:\n\tmy-volume\n\t\tdriver:local\n\nis defined at service level which means list all volumes that we defiend and mount to container when docker container starts.\n```","x":2700,"y":-280,"width":800,"height":1300,"color":"5"},
		{"id":"af9d89e4c9217205","type":"text","text":"```\nFrom node\n\nENV MONGO_DB_USERNAME=admin \\\n    MONGO_DB_PWD=password\n\nRUN mkdir -p /home/app\n\nCOPY . /home/app\n\nCMD [\"node\", \"server.js\"] \n```\n\n\n# Building image via Dokcerfile\n1. `dokcer build -t my-image:1.0 <Dokcerfile-path-location>`\n\t1. `-t` meaning image tag used to give the name of image","x":805,"y":-940,"width":635,"height":520,"color":"4"},
		{"id":"a84e229a9fac7628","type":"text","text":"# Dockerfile\nIt is blueprint for building image\n\n```\nFROM means install node\n```\n\n```\nENV means set environment variable\n```\n\n```\nRUN command is used to execute all linux command in container\n```\n\n```\nCOPY is used to copy local file into container\n```\n\n```\nCMD or ENTRYPOINT command is used to execute entrypoint command\n```","x":200,"y":-940,"width":540,"height":520},
		{"id":"181ddcb330691072","type":"text","text":"# Dokcerfile","x":640,"y":-1020,"width":250,"height":60,"color":"3"},
		{"id":"44ef08b36b9069d9","type":"text","text":"```\n1. Go to amazon webconsole and search for ECR (elastic container repository) then make an repository. In AWS-ECR there is one repositry for one image. The repository can have many version of it but it is good practice to have one image in one ECR-repository\n```\n\n```\n2. Now AWS-ECR shows you the way to push image from your local machine to AWS-ECR repository. follow the step and you good to go.\n```\n\n```\n3. Also before pushing the image please change the tag meaning name of image other wise it pushes your image on docker hub because it is by default repositry for images\n```\n\n# How change image name\n\n```\n1. docker tag my-image:1.0 3675365727.dkr.ecr.eu-central-1.amazonaws.com/my-image:1.0\n\nIt will change the image name from my-image:1.0 to 3675365727.dkr.ecr.eu-central-1.amazonaws.com/my-image:1.0\n```\n\n# Image Naming in registry\n\n```\nregistryDomain/imageName:tag\n```\n\n```\nIn dockerhub:\n\tdocker pull mongo:4.2 ------- (what we do) ---------\n\tdocker pull docker.io/library/mongo:4.2  ------- (What exactly executed) -------\n```\n\n```\nIn AWS ECR:\n\tdocker pull 3675365727.dkr.ecr.eu-central-1.amazonaws.com/mongo:4.2\n```","x":1520,"y":-1280,"width":1002,"height":860,"color":"3"},
		{"id":"b82e22ec635084c2","type":"text","text":"# Pushing image on aws ECR service","x":1680,"y":-1360,"width":540,"height":60,"color":"3"},
		{"id":"6984d2e59af1b3e8","type":"text","text":"# Docker Volume\nData is gone when restarting the container because docker save data on virtual file system. So folder in physical host file system is mounted  into the virtual file system of docker.\n\n### 3 Types of volumes\n\n1. Host volumes\n```\ndocker run -v /home/mount/data:/var/lib/mysql/data\nHere host directory is connecting with container directory.\n```\n\n2. Anonymous volumes\n```\ndocker run -v /var/lib/mysql/data\nHere we do not need to mention the location of host directory where data is saved it is automatically created by docker where to store data on host machine\n```\n\n3. Named volumes  ---( recommended ) ---\n```\ndocker run -v name:/var/lib/mysql/data\nHere we only give the name of folder instead of full path of host diretory as we do in host volumes\n```","x":2560,"y":-1140,"width":800,"height":700,"color":"1"},
		{"id":"61c48f6d0b4d2eee","type":"text","text":"# Docker volume","x":3220,"y":-1220,"width":280,"height":60,"color":"3"},
		{"id":"b6d5419b1423d335","type":"text","text":"`my_compose.yml` is the file name.\n\n\n```\nversion: '3'\nservices: \n\tmongodb: \n\t\timage: mongo\n\t\tport: \n\t\t\t- 27017:27017\n\t\tenvironment:\n\t\t\t- MONGO_INITDB_ROOT_USERNAME: admin\n\t\t\t- MONGO_INITDB_ROOT_PASSWORD: password\n\t\tvolumes:\n\t\t\t- my-volume:/var/lib/mysql/data\n\tmongo-express:\n\t\timage: mongo-express\n\t\tport: \n\t\t\t- 8080:8081\n\t\tenvironment:\n\t\t\t- ME_CONFIG_MONGODB_ADMINUSERNAME: admin\n\t\t\t- ME_CONFIG_MONGODB_ADMINPASSWORD: password\n\t\t\t- ME_CONFIG_MONGODB_SERVER: mongodb\nvolumes:\n\tmy-volume:\n\t\tdriver: local\n```\n\n```\nNOTE: my-volume:/var/lib/mysql/data here,\n\n/var/lib/mysql/data container volume path is different for different image like for \n1. mongodb it is /data/db\n2. postgresql it is /var/lib/postgresql/data\n```\n","x":3400,"y":-1140,"width":800,"height":820,"color":"5"},
		{"id":"2533915db9128835","type":"text","text":"# Docker host volumes locations\n\n#### For windows\n```\nC:\\ProgramData\\docker\\volumes\n```\n\n#### For Linux\n```\n/var/lib/docker/volumes\n```\n\n#### For Mac\nFor Mac machine it is little different, Docker for Mac creates a Linux virtual machine and stores all the Docker data here\n\n```\n1. screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty\n2. ls /var/lib/docker/volumes\n\nTo come out the virtual machine press ctrl+a+k\n```","x":3560,"y":-1760,"width":820,"height":600,"color":"2"},
		{"id":"a575b3edfea4d86d","type":"text","text":"# How to scan docker image\n\n```\n1. docker login\n\tlogin into docker hub using CLI\n\t\n2. docker scan myapp:1.0 \n\tmyapp:1.0 is image name\n```","x":2825,"y":-1500,"width":535,"height":260,"color":"5"}
	],
	"edges":[
		{"id":"82d4b71866713f44","fromNode":"7f16943fd9e15f1a","fromSide":"right","toNode":"a1c4126c3a31a921","toSide":"left","color":"1","label":"conversion"},
		{"id":"cb6f48d474471c00","fromNode":"a84e229a9fac7628","fromSide":"right","toNode":"af9d89e4c9217205","toSide":"left"}
	]
}