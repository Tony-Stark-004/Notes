{
	"nodes":[
		{"id":"dc8785278083f343","type":"text","text":"Process priority","x":-260,"y":-340,"width":580,"height":60,"color":"3"},
		{"id":"67dc6de820320889","type":"text","text":"#top\nTop command is used to manage and see the process running on our system.\n\n1. `top -v` give you the version of `top` command.\n\n***How to kill process inside the top command*** \n1. `top`\n2. press `k`\n3. write `process_id` to kill the process\n\n**`Also`** \n1. `top`\n2. press `m` it sorts the process according to` memory size` taken by process\n3. press `shift+p` it sorts the process according to `CPU` usage \n4. press `shift+n` it sorts the process according to `process_id` \n5. press `shift+t` it sorts the process according to `running time`  \n\n***Also***\n1. `top -o %CPU` Example\n2. `top -o 1%` it sorts the process according to `cpu` usage\n\n***Also***\n1. `top -H` it shows process in `threads`\n2. press `shift+h` now it switches back to `tasks`\n\n***Also***\n1. `top -c` give the full path of the command\n\n***If you want to see the process by specific user***\n1. `top -u user_name` Example \n2. `top -u root`","x":-720,"y":-260,"width":692,"height":900},
		{"id":"946fcde1a42fb4e7","type":"text","text":"***CPU state codes***\n***\n* `us` --> Time spent by CPU in executing processes in user spaces.\n* `sy` --> Time spent on running kernel spaces processes.\n* `ni` --> Time spent by CPU in executing processes with manually set nice value\n* `id` --> Time in which CPU remains idle\n* `wa` --> Time spent by CPU in waiting for input/output to complete.\n* `hi` --> Time spent by CPU in handling hardware interrupts.\n* `si` --> Time spent by CPU in handling software interrupts\n* `st` --> Time lost by CPU while it was busy on other virtual machines is called steal time","x":-680,"y":-800,"width":760,"height":400},
		{"id":"b10ac36da2df50ed","type":"text","text":"***NOYE*** : \n`Buff/cache` --> because `CPU` read-write is faster than `Hard-disk` so `RAM` comes intermediary where it hold data for sometime because `CPU` is faster so when \n1. writing on hard-disk by CPU is called `buffer`\n2. reading on hard-disk by CPU is called `cache`\n\nSO, `RAM` can be used as both `buffer or cache` depends on read-write operation by `CPU` on `Hard-disk`","x":120,"y":-800,"width":520,"height":300,"color":"1"},
		{"id":"05a3d666d420bfeb","type":"text","text":"***`SWAP Memory`***\n\nWhen RAM utilization is high and there is shortage of memory then virtual memory which is called `swap memory` is used","x":120,"y":-480,"width":520,"height":120,"color":"1"},
		{"id":"7fbd419afff61d28","type":"text","text":"***Nice Value*** \n\n1. `Nice value` is used to prioritize the process\n2. Higher the `process prioritize (PR) value` means lower `priority` \n","x":30,"y":-260,"width":610,"height":160},
		{"id":"66190a8eafe5c6b0","type":"text","text":"`Priority value` -> The priority value is the process's actual priority which is used by Linux kernal to schedule a task\n\n1. total priority values in Linux is `0 to 139`\n2. `0 to 99` for system or kernal process meaning real time process\n3. `100 to 139` for user process\n\n`Nice value` -> Nice value is  user-space values that we can use to control the priority of a process.\n\n1. range is `-20 to +19`\n2. where `-20` meaning highest priority and `+19` meaning lowest\n\n**`Priority value = Nice value + 20`**","x":30,"y":-80,"width":610,"height":400,"color":"1"},
		{"id":"130524f11c44f785","type":"text","text":"***How to change process priority***\n\n1. `renice -n 10 process_id` example\n2. `renice -n 10 3010` where `3010` is process-id\n\nAlso,\n1. `nice -n -5 sh infinite.sh`\n\n***NOTE*** : `renice` is used when process is already exist and `nice` is used when we launch new process","x":20,"y":340,"width":620,"height":300},
		{"id":"77dfda833c221b23","type":"text","text":"#mkfifo \nmeaning make first-input and first-output. It is used to make `pipe` files which is connected to each other and output of first file is input for other\n\n1. `mkfifo pipe1 pipe2 pipeA pipeB`\n","x":-720,"y":660,"width":692,"height":220},
		{"id":"352253144673ba21","type":"text","text":"#jobs \nIt is used to see background processes running on system\n\n1. run `jobs`\n2. `sleep 120 &` here `&` is used to put process in background\n3. press `shift+z` to put the process in background\n\n***Also,***\n1. `jobs -p` shows all background running process-Id\n\n***How to put `background` process into `foreground`***\n#fg \n\n1. `fg queue_number`\n2. `fg 2`\n\n#bg \nused to start background processes in running state which is stopped\n\n1. `bg queue_number`\n2. `bg 2`","x":20,"y":660,"width":620,"height":600}
	],
	"edges":[]
}