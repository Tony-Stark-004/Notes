{
	"nodes":[
		{"id":"537104d540d89963","type":"text","text":"`System defined variables`\n\n1. defined in `Capital letter`","x":-640,"y":-189,"width":542,"height":109},
		{"id":"babd004c8e3f561c","type":"text","text":"System variables\n\n1. `echo $SHELL` display the shell that you are working on.\n2. `echo $HOSTNAME` display hostname of system\n3. `echo $PWD` display present working directory\n4. `echo $USER` display current user name\n5. `echo $?` give `0` if previous command has no error\n6. `echo $PATH` stores `path` of all kinds of binaries files example : `/usr/bin`\n7. `echo $PS1` display `environment value` that how to display `user-name / host-name / working directory` i.e. `promt` in different shell like `bash or zsh`. Also we can change the value of `PS1=\"touch me : \"` now `promt show touch me :` instead of `user-name / host-name / working directory`. PS1 also stores `colors of promt`\n8. `echo $SHLVL` display `shell level` Example : \n     1.  run `bash` then `echo $SHLVL` show `2` means `one main shell and one sub-shell`\n     2.  run `bash` then  `zsh` then `echo $SHLVL` show `3` means `one main shell and two sub-shell`\n9. `echo $-`  display  `list of all options that currently set on device` also output is `himBHs`\n10. `echo $HISTSIZE` give the number that indicate capacity of command being saved as history in shell itself. \n11. `echo $HISTFILE` give all saved history-commands `file path` which is `/root/.bash_history`\n12. `echo $HISTFILESIZE` give the number that indicate capacity of command being saved as history in `/root/.bash_history` file\n13. `echo $LANG` give language description `en_US.UTF-8`\n\t1. `LANG=C` which set case sensitivity meaning `A` and `a` treated differently\n     ","x":-880,"y":-60,"width":1000,"height":680,"color":"1"},
		{"id":"921575102fde59c8","type":"text","text":"Shell Variables","x":-240,"y":-420,"width":800,"height":60,"color":"3"},
		{"id":"5319d4813039c794","type":"text","text":"`User defiend variables`\n\n1. defined by user\n2. user defined variable is temporary and removed just by logout\n\n****NOTE*** : \n1. in directory `/root` , `.bashrc file is present` to store the user variable permanently we to have to register the `user defined variable`  in `.bashrc file`\n\n2. for many user we can store the variable permanently in `/etc/profile` and for single user `/root/.bashrc` file.\n\n3. to view all system variables run `set command` on `CLI`\n","x":212,"y":-189,"width":799,"height":389},
		{"id":"a23182c30200d78d","type":"text","text":"User defined variables\n\nhow to define :\n1. run `myvar=100`\n2. `echo $myvar` after running this commands it display 100 as output.\n\n****NOTE*** : \n1. `echo '$myvar'` wrapping in single quotes `''` gives $myvar as output\n2. `echo \"$myvar\"` wrapping in double quotes `\"\"` gives 100 as output.\n\n\n****NOTE*** :\n1. to remove the temporary variable `myvar` run  `unset myvar` ","x":212,"y":240,"width":799,"height":380},
		{"id":"5abc4633b5abcddd","type":"text","text":"`Before exporting variable`\n\n1. run `var=100`\n2. run `echo $var` output is `100`\n3. now, run `zsh` output you enter to `sub-shell` if you do `echo $SHLVL` then it shows `2`\n4. run `echo $var` output is `none` \n\nreason : `var=100` is defined in `main shell` whose `shell-level is 1` so in `zsh shell` this variable is unbound\n\n`After exporting variable`\n\n1. run `export var=100` with export keyword\n2. run `echo $var` output is `100`\n3. now, run `zsh` output you enter to `sub-shell` if you do `echo $SHLVL` then it shows `2`\n4. run `echo $var` output is `100` \n5. run `bash -c 'echo $var'`  output is `100`\n6.  run `env -i bash -c 'echo $var'`  output is `none` `env -i` means do not show exported variables\n\nreason : `var=100` is defined in `main shell` whose `shell-level is 1` after using export you are bounding the variable for other shell so in `zsh shell` this variable is bounded so output is `100`","x":212,"y":660,"width":799,"height":560,"color":"1"},
		{"id":"319d8c4f99eac5d7","type":"text","text":"`set -u` enable unbound variables error messages on `prompt`\n`set +u` disable the unbound variables error messages\n\nbefore `set -u`\n1. run `echo $var` output in nothing without error because you haven't defined the `var`\n2. run `var=100`\n3. `echo $var` output is `100` because you defined the variable\n\nafter `set -u` \n1.  run `echo $var` output in `error` because you haven't defined the `var`\n2. run `var=100`\n3. `echo $var` output is `100` because you defined the variable","x":212,"y":1240,"width":799,"height":380},
		{"id":"34b167c24988c42b","type":"text","text":"`env variable` :  use to hide `secret / private` value holding variables.\n\n1. `bash -c 'echo $SHELL $HOME $USER'` it shows exported env variable form other shells (`sub-shell   `) too so output is `/bin/bash /root root` \n2. `env -i bash -c 'echo $SHELL $HOME $USER'` it shows  env variable form current shells so output is `/bin/bash` only \n3. `env LANG=c bash -c 'ls File[a-z]'` output is `Fileac & Filebz but not FileAB` only exact matching file will show in output\n4. `env LANG=en_us.UTF-8 bash -c 'ls File[a-z]'` output is `Fileac & Filebz also FileAB` US-English includes Capital letters too that means `case-insensitive` ","x":-840,"y":660,"width":920,"height":300}
	],
	"edges":[
		{"id":"f647e6b7e119dc85","fromNode":"921575102fde59c8","fromSide":"bottom","toNode":"537104d540d89963","toSide":"top"},
		{"id":"a56babc668f5a9ba","fromNode":"921575102fde59c8","fromSide":"bottom","toNode":"5319d4813039c794","toSide":"top"}
	]
}