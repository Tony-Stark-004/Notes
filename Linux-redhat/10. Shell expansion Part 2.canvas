{
	"nodes":[
		{"id":"e2f948b331d45a28","type":"text","text":"1st control operator\n`semi-colon ;`\n\nused to run multiple command serially (one by one) in one go\n\nExample : -\n1. `echo myname ; cat read.txt`\n\nhere we are displaying `nyname` and reading `read.txt` in single command using `semi-colon ;`","x":-667,"y":-152,"width":507,"height":288},
		{"id":"62b7849a4db41699","type":"text","text":"2nd control operator\n`and &`\n\nused to run multiple command parallelly (together) in one go\n\nExample : -\n1. `echo myname & cat read.txt`\n\nhere we are displaying `nyname` and reading `read.txt` in single command using `and &`","x":-80,"y":-152,"width":507,"height":288},
		{"id":"43164be02a762d8e","type":"text","text":"3rd control operator\n`question-mark ?`\n\nIt is `system defined variable` which holds previous command value\n1. if value is `0` it means previous command run without error\n2. if not equal to `0` it means previous command run with error\n\nExample : -\n1. run `cat text.txt` and then `echo $?` it gives `0` because previous command `cat text.txt` works perfectly\n2. run `cat text.txt` but this time `text.txt` file is not exist so it gives you the error now run `echo $?` it gives value which is not `0`\n\n","x":500,"y":-152,"width":620,"height":372},
		{"id":"72da65e2b1210d41","type":"text","text":"Control operator --> operator that used to run more than one command in one go\nExample : -\n1.  ","x":-360,"y":-320,"width":860,"height":113,"color":"3"},
		{"id":"bec53e39eee2259f","type":"text","text":"4th control operator\n`logical-AND &&`\n\ngive the output if all true means if previous command has no error then next command execute otherwise no output\n\nExample : -\n1. `echo myname && cat read.txt` so because 1st command run without giving the error so 2nd command will execute and displayed both command output.\n\n2. `ech myname && cat read.txt` so because 1st command run with error  because `ech` is not valid command so 2nd command will not execute and therefore no output for both command even if 2nd command is valid command\n\n\n4. `echo myname && cac read.txt` so because 1st command run without error  so 2nd command will execute but 2nd command give error because `cac` is not valid command and therefore only output is `myname`\n\n","x":-667,"y":260,"width":507,"height":560},
		{"id":"3c74fac1b2536b98","type":"text","text":"5th control operator\n`logical-OR ||`\n\ngive the output if either one of two is true. which ever command is `true` is the output\n\nExample : -\n1. `echo myname || cat read.txt` because 1st commands runs without error so, displayed 1st command output.\n\n2. `ech myname || cat read.txt` so because 1st command run with error  because `ech` is not valid command still 2nd command will execute and give the output of 2nd command\n\n\n3. `echo myname || cac read.txt` so because 1st command run without error  so displayed 1st command output `myname`\n\n","x":-80,"y":260,"width":507,"height":560},
		{"id":"2a3b22c06d6dc7d9","type":"text","text":"6th control operator\n`pound-operator #`\n\nuse to `commenting` the command on `CLI` or `commenting anything`\n\n\n","x":500,"y":280,"width":507,"height":180},
		{"id":"fa323232baf33c16","type":"text","text":"7th control operator\n`backslash \\`\n\nuse to `ignore the word or character `\nExample :- \n\nwithout `back-slash \\`\n1. `echo hello ; world` give error the correct command should be `echo hello ; echo world`\n\nwith `back-slash \\`\n1. `echo hello \\; world` now `back-slash \\` ignore the `semi-colon ;` so output is `hello ; world` without error.\n\n\n****NOTE*** : also used to break big line\n1.\n`echo helo you. \\` on pressing enter it won't execute and tell you to write in next line\n`> i am aditya` on pressing enter the output is : `helo you. i am aditya`","x":500,"y":480,"width":740,"height":500}
	],
	"edges":[]
}