{
	"nodes":[
		{"id":"45dd0b0ef11e81e4","type":"text","text":"Working with file content","x":-300,"y":-380,"width":580,"height":60,"color":"3"},
		{"id":"73a1a11822cc2019","type":"text","text":"`head`\n#head command is used to `view top` 10 line of file content\n\nExample:\n1. `head read.txt` shows `top 10 lines` on display\n2. `head -15 read.txt` shows `top 15 lines` on display","x":-820,"y":-700,"width":497,"height":240},
		{"id":"ff312ec1855cfe7c","type":"text","text":"`tail`\n#tail command is used to `view last` 10 line of file content\n\nExample:\n1. `tail read.txt` shows `last 10 lines` on display\n2. `tail -15 read.txt` shows `last 15 lines` on display","x":-258,"y":-700,"width":497,"height":204},
		{"id":"5fc4845154e9a0cd","type":"text","text":"`echo`\n#echo command is used to `display` content on `CLI` and also for `creating` files \n\nExample: \n1. `echo read.txt` it display `read.txt` on `CLI` as it is and not the content of `read.txt` unlike `cat` do\n2. `echo 'my name is aditya' > write.txt` it create `write.txt` file and `add : my name is aditya` content in it at same time . Also if `write.txt` file already exist then it `replace` the content of `write.txt` file with new content.\n\n****Note*** : To prevent the content over-riding we run `echo 'my name is aditya' >> write.txt` which `append` the new content with previous content","x":-160,"y":-178,"width":820,"height":344},
		{"id":"9a1b6eb4914da820","type":"text","text":"`cat`\n#cat command is used to `view` content and also for `creating` files \n\nExample: \n1. `cat read.txt` it only view the content of `read.txt` file.\n2. `cat > write.txt` it create `write.txt` file and allow to add content in it at same time. Also if `write.txt` file already exist then it `replace` the content of `write.txt` file with new content.\n\n****Note*** : To prevent the content over-riding we run `cat >> write.txt` which `append` the new content with previous content\n\n`custom-marker <<` it is not command\n`cat > write.txt <<stop`\nthis command allow me to exit writing content when i type `stop`","x":-820,"y":-258,"width":600,"height":424},
		{"id":"2a17aa4cbb793c80","type":"text","text":"`tac`\n#tac command is used to display file content in `reverse order` \n\n`tac read.txt`","x":-820,"y":200,"width":381,"height":160},
		{"id":"36ff2449e1a55361","type":"text","text":"`more`\n#more command is used to `view content line by line` \n\nExample:\n1. `more read.txt` do not show entire content at once only content that fit on `screen` would display and then we need to press `enter` to view more content line by line\n2. `space` key is used to scrolling over the content\n","x":300,"y":-780,"width":497,"height":284},
		{"id":"27707a63540d0d2d","type":"text","text":"`vi`\n#vi command is used to `edit file content`\n\n `vi read.txt` \n\n****NOTE*** : we will learn more about it in following lectures \n","x":360,"y":-430,"width":497,"height":172,"color":"1"},
		{"id":"d697e227d37a75eb","type":"text","text":"`less`\n#less command is used to `view content line by line` \n\nExample:\n1. `less read.txt` do not show entire content at once only content that fit on `screen` would display and then we need to press `enter, up or down key` to view more content line by line\n2. `space` key is used to scrolling over the content\n","x":880,"y":-780,"width":497,"height":284},
		{"id":"98e8f701660f0768","type":"text","text":"`strings`\n#strings command is used to `view binaries file content` \n\nExample:\n1. `strings zsh` shows the content of `zsh binary file` \n\n****NOTE***  : `cat command` is not able to display content of `binaries files` in right way so we use `strings command`  ","x":720,"y":-178,"width":723,"height":258}
	],
	"edges":[]
}