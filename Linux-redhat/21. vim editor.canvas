{
	"nodes":[
		{"id":"48a619c39bff824d","type":"text","text":"VIM editor --> `Modified VI editor`\n\n1. Used to create or edit files\n2. VIM has two modes : \n\t1. `command mode` press `esc key` for switching back to `command mode` from `insert mode` \n\t2. `insert mode` to enable it press `insert key`","x":-380,"y":-420,"width":780,"height":220,"color":"3"},
		{"id":"7141cca671415f9a","type":"text","text":"when you create file using `vim command` it is in `command mode` by default\n\n1. `vim text.txt` it create file \n2. press `i or insert key` to write in it after done writing press `esc` so that we can switch to `command mode`\n3. now to quit `vim editor` entirely press `column :` and type `wq!` after `column` or type `q` only  ","x":-580,"y":-154,"width":590,"height":220},
		{"id":"dd55d28874637043","type":"text","text":"`special alphabet`\n\n1. `a` : press small `a` in `command mode` it start writing after current cursor word\n2. `A` : press Capital `A` in `command mode` it start writing  at end of current cursor line \n3. `i` : press small `i` in `command mode` it start writing before current cursor word\n4. `I` : press Capital `I` in `command mode` it start writing from starting line of current cursor line\n5. `o` : press small `o` in `command mode` it start writing  from next line of current cursor line\n6. `O` : press Capital `O` in `command mode` it start writing from previous line of current cursor line\n7. `x` : press small `x` in `command mode` it deletes or cut current cursor word\n8. `X` : press Capital `X` in `command mode` it deletes words that is  before current cursor word\n9. `r` : press small `r` in `command mode` it seems it does not do anything but when you type any keyword it replace the current cursor word by that keyword\n10. `p` : press small `p` in `command mode` it paste anything that is present in clipboard after the current cursor word\n11. `xp` : press small `xp` in `command mode` it swap the word position\n12. `u` : press small `u` in `command mode` it undo\n13. `.` : press small `.` in `command mode` it redo\n14. `dd` : press small `dd` in `command mode` to cut entire line of current cursor line and press `p` to paste it after current cursor line and press `P` to before \n15. `2dd` : press small `2dd` in `command mode` to cut 2  line of current cursor line  \n16. `3dd` : press small `3dd` in `command mode` to cut 3  line of current cursor line  \n17. `yy` : press small `yy` in `command mode` to copy entire line of current cursor line and press `p` to paste it after current cursor line and press `P` to before \n18. `0` or `up arrow` : press numeric `0 or up arrow` in `command mode` to jump start of current cursor line but you will remain in `command mode` \n19. `$` : press numeric `$` in `command mode` to jump at the end of current cursor line but you will remain in `command mode` \n20. `d0` : press `d0` in `command mode` it delete everything till start of current cursor line\n21. `d$` : press `d$` in `command mode` it delete everything till end of current cursor line\n22.  `J` : press `J` in `command mode` to join different lines\n23.  `w` : press `w` in `command mode` to jump forward one word to other \n24.  `3w` : press `3w` in `command mode` to jump 3 word forward  \n25.  `dw` : press `dw` in `command mode` to delete one word  \n26.  `2dw` : press `2dw` in `command mode` to delete 2 word  forwardly\n27.  `b` : press `b` in `command mode` to jump backward one word to other \n28.  `db` : press `db` in `command mode` to delete one word  previous\n29. `:w file_name`: press `column :w file_name` in `command mode` it save file as `save as` you can give any name while saving file\n30. `ZZ`: press `ZZ` in `command mode` to save file and quit at same time\n31. `/search_word`: press `/hello` in `command mode` to search any keyword this is called forward search\n31. `?search_word`: press `?hello` in `command mode` to search any keyword this is called backward search\n32. `:r copy_content_file_name` : press `column :r count.txt` this copy all content from `copy_content_file_name` to current file without exiting `vim editor`\n33. `:r !command_name` : `column :r !lsblk` it add output of `lsblk command` in file\n34. `\"ad` in `command mode` to `cut line and put it into buffer` and to paste it press `\"ap`\n35. `\"g7yy` in `command mode` to `copy 7 line and put it into buffer` and to paste it press `\"gp`\n36. `:set number` or `:se nu` in `command mode` to enable line number of content\n37. `:set nonumber` or `:se nonu` in `command mode` to disable line number of content\n38. `:set all` in `command mode` to view all option in `vim editor`\n\n\n","x":40,"y":-154,"width":1240,"height":1174,"color":"1"},
		{"id":"6c7b5bc48c150d01","x":-620,"y":-580,"width":406,"height":125,"type":"text","text":"how to see installed package\n1. `rpm -qa | grep vim`\n2. `dnf list installed | grep vim`"},
		{"id":"1ebb1faafdb32ec7","x":-616,"y":100,"width":626,"height":240,"type":"text","text":"How to open multiple file using `vim`\n1. `vim first_file_name second_file_name third_file_name`\n2. `:args` in `command mode` to see which file we are in\n3. `:n` to switch to next file\n4. `:rew` to switch to previous file\n5. `:e` to switch last edited file"},
		{"id":"57ca11cff75354b5","x":-820,"y":373,"width":830,"height":307,"type":"text","text":"`use of .vimrc file`\n\nif we want some option by default in `vim editor` then we write that option in `.vimrc` it is like `.profilerc` file\n\n1. `cat > .vimrc` in home directory and it allow to write because we are making using `cat command`\n2. `set number`\n\nnow what would happen every time when i open any file using `vim editor` it open that file with number of lines in it"}
	],
	"edges":[]
}