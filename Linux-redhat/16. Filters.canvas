{
	"nodes":[
		{"id":"6230c3069db54a08","type":"text","text":"\n1. `vim count.txt` and fill the content with text `one`, `two`, `three`, `four`, `five` and `six`\n2. run `cat count.txt` output would be `one, two, three, four, five, six`\n3. run `tac count.txt` output would be `six, five, four, three, two, one` in reverse order \n\n`use of pipe (|)`\n\n1. run `tac count.txt | tac` then output would be `one, two, three, four, five, six`\n2. run `tac count.txt | cat` output would be `six, five, four, three, two, one` \n\n****NOTE*** : The output of one command serve as input for other command so in point 2 output of `tac count.txt` which is `six, five, four, three, two, one` serve as input for `cat command` and `cat command` display it's input content so final answer is `six, five, four, three, two, one`\n\n3. run `tac count.txt | tee temp.txt` output would be `six, five, four, three, two, one`\n4. when we run `cat temp.txt` content of temp would be `six, five, four, three, two, one`\n5. run `tac count.txt | tee temp.txt | tac` output would be `one, two, three, four, five, six`\n","x":-864,"y":-200,"width":864,"height":440},
		{"id":"8c61e5e380bb1852","type":"text","text":"`grep command`\n#grep used to search particular string from `files` or even from other command output which serve as input to `grep command`\n\n1. run `cat tennis.txt | grep williams` \n2. output would be  `Serena Williams, usa & Venus Williams, USA` with `William` keyword highlighted with color\n\nalternate way of using `grep`\n\n1. run `grep Williams tennis.txt` \n2. output would be  `Serena Williams, usa & Venus Williams, USA` with `William` keyword highlighted with color\n\n****NOTE*** : this command is case sensitive meaning if we search `william` start with `small w` then it will not give us output\n\n`How to seach case in-sensitively`\n\n1.  run `grep -i williams tennis.txt` here `-i` tells search for `william` whether it start from `capital W` or `small w` it gives both `william` as output case insensitively\n\n\n","x":40,"y":-240,"width":740,"height":540,"color":"4"},
		{"id":"909dd637ab829335","type":"text","text":"`content of tennis.txt file`\n\nAmelie Mauresmo, Fra\nKim Clijsters, BEL\nJustine Henin, Bel\nSerena Williams, usa\nVenus Williams, USA\n\n","x":838,"y":-240,"width":362,"height":200},
		{"id":"405cf7323edaad0b","type":"text","text":"`getting non-matching strings data`\n\n1. `grep -v Bel tennis.txt` here `-v` tells the command i want to ignore `Bel string data` and wants other data that not include `Bel` so \n2. output is --> `1. Amelie Mauresmo, Fra 2. Kim Clijsters, BEL  3. Serena Williams, usa 4. Venus Williams, USA`\n\n3. `grep -vi Bel tennis.txt` here `-v` ignore `Bel` matching strings and `-i` search for `Bel` keyword insensitively so `Bel` or `BEL` both are ignored so \n4. output is -->` 1. Amelie Mauresmo, Fra 2. Serena Williams, usa 3. Venus Williams, USA`","x":40,"y":340,"width":740,"height":300,"color":"5"},
		{"id":"21b257133605bc76","type":"text","text":"`A1 or B1 or C1`\n\n`A1` display next one line of original output\n`A2` display next two line of original output\n\n1. `grep Bel tennis.txt` output is `Justine Henin, Bel`\n2. `grep -A1 Bel tennis.txt` output is `1. Justine Henin, Bel 2. Serena Williams, usa`\n\n`B1` display previous one line of original output\n`B2` display previous two line of original output\n\n1. `grep Bel tennis.txt` output is `Justine Henin, Bel`\n2. `grep -B1 Bel tennis.txt` output is `1.Kim Clijsters, BEL 2. Justine Henin, Bel`\n\n`C1` display next as well as previous one line of original output\n`C2` display next as well as previous two line of original output\n\n1. `grep Bel tennis.txt` output is `Justine Henin, Bel`\n2. `grep -B1 Bel tennis.txt` output is `1.Kim Clijsters, BEL 2. Justine Henin, Bel 2. Serena Williams, usa`","x":40,"y":680,"width":740,"height":560},
		{"id":"83207c191b5850a5","type":"text","text":"`content of tennis.txt file`\n\nAmelie Mauresmo, Fra\nKim Clijsters, BEL\nJustine Henin, Bel\nSerena Williams, usa\nVenus Williams, USA\n\n","x":880,"y":340,"width":362,"height":200},
		{"id":"13101138bb9aef5e","type":"text","text":"`content of tennis.txt file`\n\nAmelie Mauresmo, Fra\nKim Clijsters, BEL\nJustine Henin, Bel\nSerena Williams, usa\nVenus Williams, USA\n\n","x":880,"y":680,"width":362,"height":200},
		{"id":"7c988dd740a5053f","type":"text","text":"`cut filter command`\n#cut used to filter `particular column` from files\n\n`/etc/passwd` --> \n1. stores all local users information like `password and all`\n2. this file has `7-8 columns`\n\nUses of `cut command`\n\n1. `cut -d: -f1,3 /etc/passwd`\n\n****IMPORTANT*** : let's break down the command\n\n1. `cut` command name\n2. `-d:` delimiter -> `a character or symbol which separates one piece of data from another`\n3. `-f1,3` meaning which columns we want here `we want 1st column and 3rd column`\n4. if `-f1,7` meaning columns we want here `we want 1st column and 7th column`\n5. `/etc/passwd` in which file we are applying filter\n\nnow, \n 1. `cut -d: -f1,3 /etc/passwd | tail -5` which give filtered `1st and 3rd column` but only `last 5 lines`\n\n****NOTE*** : `if we want only first column`\n\n1. `cut -d: -f1 /etc/passwd` it gives only first column as output\n2. `cut -d: -f2 /etc/passwd` it gives only 2nd column as output\n3. `cut -d\" \" -f1 tennis.txt` it also gives only 1st column as output\n\nHere in 1st command `-d:` is used where in 3rd command `-d\" \"` is used reason is simple it depends on how data is stored in files \n1. in `tennis.txt` data is differentiated by `space key` Example ---> `Amelie Mauresmo, Fra` while\n2. in `/etc/passwd` data is separated by `: char` Example ---> `root:x:0:0:root:/root:/bin/bash`\n\n\n\n\n\n\n","x":1400,"y":-250,"width":880,"height":890,"color":"1"},
		{"id":"7ed7ccbe1883d0c6","type":"text","text":"`how to filter on the basis of characters range of columns`\n\n1. `cut -c2-7 /etc/passwd` meaning we want `2 to 7 character`  Example --->\n\t1.  `adityakumar` is column name then its `2 to 7 char` is `dityaku` so it is the output ","x":1400,"y":680,"width":880,"height":140},
		{"id":"cf791b559ae074ca","type":"text","text":"Filters --> Commands that uses pipe sign `|` consider as filtered command","x":40,"y":-360,"width":1360,"height":50,"color":"3"},
		{"id":"74b2c56925fa6487","type":"text","text":"`tr command`\n#tr translate command is used to encrypt of decrypt the file content.\n\nExample :\n1. `cat tennis.txt | tr 'a-z' 'A-Z'` here `tr` command change all alphabets of `tennis.txt` file in `Capital alphabet`\n2. `cat tennis.txt | tr 'a' '8'` here `tr` command is telling change all small `a` present in `tennis.txt` to `8` so, output is \n\t1. `before : Amelie Mauresmo, Fra`\n\t2. `after: Amelie M8uresmo, Fr8`\n3. `cat count.txt | tr '\\n' ' '` this tells replace all `next line space` to `single sapce` so output is\n\t1. `one two three four`\n \nlet's break `tr 'a-z' 'A-Z'`\n1. `tr` command name\n2. `a-z` things need to change meaning this is current state. The file content is in `a-z` alphabet\n3. `A-Z` in which form things going to change this is final form.\n\n\n","x":1100,"y":-1000,"width":900,"height":560},
		{"id":"ef15d721f6d3b983","type":"text","text":"`content of tennis.txt file`\n\nAmelie Mauresmo, Fra\nKim Clijsters, BEL\nJustine Henin, Bel\nSerena Williams, usa\nVenus Williams, USA\n\n","x":598,"y":-1040,"width":362,"height":200},
		{"id":"24be03c48b724b3d","type":"text","text":"`content of count.txt file`\n1. one\n2. two\n3. three\n4. four","x":588,"y":-820,"width":372,"height":180},
		{"id":"fac0c846607f3905","type":"text","text":"`wc command`\n#wc is used to count `word, chaacter and lines` of file content\n\nExample :\n1. `wc tennis.txt` output is ` 5  15 100 tennis.txt`\n2. `ps -ef | wc -l` give no of processes running on system\n3. `yum list installed -l` give no of installed packages \n\n***NOTE*** : `yum list installed -l` here `-l` is used because all packages are comes one by one in next line so` total no of packages = no of lines`\n\nalternate way to write \n1. `cat tennis.txt | wc` same output\n2. `cat tennis.txt | wc -l` give only no of lines so, output is `5`\n3. `cat tennis.txt | wc -w` give only no of words so, output is `15`\n4. `cat tennis.txt | wc -c` give only no of characters so, output is `100`\n\nlet's breaks output of this command ``wc tennis.txt``\n1. `5` total number of lines in `tennis.txt`\n2. `15` total words \n3. `100` total characters\n4. `tennis.txt` file name","x":-260,"y":-1300,"width":675,"height":640},
		{"id":"8fe47304706562bc","type":"text","text":"`sort commad`\n#sort is used to sorting means arranging descending or ascending order\n\nExample :\n1. `sort music.txt` output would be `1} Abba, 2} Burel, 3} Led, 4} Queen`\n2. `sort -k1 music.txt` here `-k1 or -k2 or -k3` is used to sort specific column not entire file content","x":-1220,"y":-1026,"width":840,"height":226},
		{"id":"a8b3e303a3abb5e5","type":"text","text":"`content of music.txt file`\n1. Queen\n2. Burel\n3. Led\n4. Abba","x":-720,"y":-1240,"width":300,"height":195},
		{"id":"f9d82267f11cf4db","type":"text","text":"`content of alter.txt file`\n1. Queen\n2. Burel\n3. Led\n4. Abba\n5. Queen","x":-680,"y":-757,"width":300,"height":217},
		{"id":"710c663280540c07","type":"text","text":"`uniq commad`\n#uniq is used to remove duplicate but it work with `sort command`\n\nExample :\n1. `uniq alter.txt` output is `1} Queen, 2} Burel, 3} Led, 4} Abba, 5} Queen` see it didn't work but,\n2. `sort alter.txt | uniq` then output is `1} 4} Abba, 2} Burel, 3} Led, 4} Queen` it remove duplicate content and sort them as well\n3. `sort alter.txt | uniq -c` it gives you the same output as `point no. 2` but `-c` count the number of duplicate word","x":-1220,"y":-520,"width":840,"height":280,"color":"4"},
		{"id":"ca87d19459af0876","type":"text","text":"`comm command`\n#comm used to compare one file with another and the common contents  show on right hand side and left hand side show file content itself but not common one\n\nExample : \n1. `comm file_name_1 file_name_2`","x":-864,"y":290,"width":864,"height":200},
		{"id":"024682f67a10e9fa","type":"text","text":"`od command`\n#od used to see `hexa-decimal or bytes` of file contents\n\nExample : \n1. `od -t x1 text.txt`  output is `0000000 61 62 63 64 0a 31 32 33 34 0a`\n2. `od -b x1 text.txt` to show in `octal system`\n3. `od -c x1 text.txt` to show in `ASCI system` output is `0000000   a   b   c   d  \\n   1   2   3   4  \\n`","x":-864,"y":540,"width":864,"height":240},
		{"id":"316ca3391dc27156","type":"text","text":"`content of text.txt files`\nabcd\n1234","x":-1260,"y":579,"width":300,"height":123},
		{"id":"e3dd82f1dd54909f","type":"text","text":"`sed command`\n#sed stream editor is used to modify the command or its output on runtime meaning before execution of command\n\nExample : \n1. `echo level5` output is `level5`\n\nusing `sed` stream editor\n1. `echo level5 | sed 's/5/42'` output is `level42`\n2. `echo level5 | sed 's/level/jump/'` output is `jump5`\n\nlets break it `echo level5 | sed 's/5/42/'`\n1. `echo level5` this execute and output is `level5` but this is work as input for `sed command`\n2. `|` filter sign\n3. `sed 's/5/42/'` this tell change input value of `5` to `42` so, output is `level42`\n\n****NOTE*** : `s/5/42` here `s` means `string`\n\n------When do we use global `g`-------\n1. `echo level2 level5` output is `level2 level5`\n2. `echo level2 level5 | sed 's/level/jump/'` output is `jump2 level5` here `jump` is not going to replace all `level strings` to do that we need to add `g` means global\n3. `echo level2 level5 | sed 's/level/jump/g'` output is `jump2 jump5`\n\n---- when we need to delete match strings line ------\n\n1. `cat tennis.txt | sed '/BE/d'` here content of `tennis.txt` file serve as input to `sed` command and set command tells `delete entire line where string (BE) matched`\n","x":-864,"y":840,"width":864,"height":780,"color":"1"},
		{"id":"95a1ef5a56b5c3ba","type":"text","text":"`tee command`\n#tee similar work as `cat command` only difference is\n\n1. it makes file and display content at same time while `cat command` only make file or display content at a time","x":360,"y":-580,"width":600,"height":160,"color":"1"},
		{"id":"50d883c6288bd514","x":-56,"y":-580,"width":356,"height":160,"color":"6","type":"text","text":"`who command`\n#who give no of users logged-in device\n\n1. `who | wc -l` give total no. of users"}
	],
	"edges":[
		{"id":"d0ee2add869b0666","fromNode":"8c61e5e380bb1852","fromSide":"right","toNode":"909dd637ab829335","toSide":"left"},
		{"id":"08559c4582e17e7e","fromNode":"405cf7323edaad0b","fromSide":"right","toNode":"83207c191b5850a5","toSide":"left"},
		{"id":"70767d0c5588f9ff","fromNode":"21b257133605bc76","fromSide":"right","toNode":"13101138bb9aef5e","toSide":"left"},
		{"id":"6f1f6036942c9cb3","fromNode":"ef15d721f6d3b983","fromSide":"right","toNode":"74b2c56925fa6487","toSide":"left"},
		{"id":"0e29a8d06645f6d7","fromNode":"24be03c48b724b3d","fromSide":"right","toNode":"74b2c56925fa6487","toSide":"left"},
		{"id":"bc381304ed85a14a","fromNode":"ef15d721f6d3b983","fromSide":"left","toNode":"fac0c846607f3905","toSide":"right"},
		{"id":"19fa70fd570395b6","fromNode":"f9d82267f11cf4db","fromSide":"left","toNode":"710c663280540c07","toSide":"top"},
		{"id":"801e7ba809532eaf","fromNode":"a8b3e303a3abb5e5","fromSide":"left","toNode":"8fe47304706562bc","toSide":"top"},
		{"id":"4cb5f18014c67b15","fromNode":"316ca3391dc27156","fromSide":"right","toNode":"024682f67a10e9fa","toSide":"left"}
	]
}