{
	"nodes":[
		{"id":"15e41fbff8c9da66","type":"text","text":"# Package Management in Linux","x":-300,"y":-347,"width":540,"height":60,"color":"3"},
		{"id":"ff46d8def97d3a73","type":"text","text":"# Package Management\n\n#### Debian based machine\n* package extension is `.deb`\n* package manager command is `dpkg`, `aptitude`, and `apt-get`\n\n#### Fodora based machine\n* package extension `.rpm`\n* package manager command is `rpm`, `yum`, and `dnf`\n\n# Basic Linux Packages Managements terms\n\n* `Repository` --> Repository is a lot of software and documentation for Linux distribution and is available as packages one or more centrally distributed repository   ","x":-550,"y":-260,"width":810,"height":520},
		{"id":"298f5cfe9abfc0eb","type":"text","text":"# Debian based command\n\n#### `dpkg command`\n\n1. To list all the installed packages in machine\n\t* `sudo dpkg -l`\n\t* `sudo dpkg -l | wc -l` count number of installed packages\n2. To see the details of specific packages\n\t* `sudo dpkg -l <package-name>`\n3. To see which dependencies packages installed due to certain packages\n\t* `sudo dkpg -S <package-name>`\n\t* `sudo dkpg -S /usr/share/doc/rsync` it will show for which package this dependency is being installed\n\t* `sudo dpkg -L <package-name>` will show dependency package name only meaning shows least details\n4. let's install and remove packages using `dpkg command`\n\t* `sudo dpkg -i <package-name>` here `-i` meaning install\n\t* `sudo dpkg -r <package-name>` here `-r` meaning remove\n\n\n#### `apt-get command`\n\n1. Patching packages \n\t* `sudo apt-get update`\n\t* `sudo apt-get upgrade`\n2. Where all downloaded packages would go in our machine or say locally where it is present\n\t* `cd /var/cache/apt/archives`\n3. Removing every packages present in `/var/cache/apt/archives` at once\n\t* `sudo apt-get clean`\n4. Listing specific package that store in cache\n\t* `sudo apt-cache search <package-name>` \n5. Installing package\n\t* `sudo apt-get install <package-name>` \n6. Removing package\n\t* `sudo apt-get remove <package-name>`\n7. Removing package with all data and its configuration files\n\t* `sudo apt-get purge <package-name>`\n\n\n#### `Aptitude command`\n\n1. Installing Aptitude packages\n\t* `sudo apt-get install aptitude`\n2. Patching packages\n\t* `sudo aptitude update`\n\t* `sudo aptitude upgrade`\n\t* `sudo aptitude safe-upgrade` It will patch the packages safely\n3. Installing packages\n\t* `sudo aptitude install <package-name>`\n4. Removing package\n\t* `sudo aptitude remove <package-name>`\n5. Searching package related details \n\t* `sudo aptitude search <package-name>`\n6.  Removing package with all data and its configuration files\n\t* `sudo aptitude purge <package-name>`","x":280,"y":-260,"width":880,"height":1500,"color":"3"},
		{"id":"fbb04bab7197b769","type":"text","text":"# Ubuntu repository file\n\n```\n1. ls -lh /etc/apt/sources.list\n   \nðŸ‘‰ðŸ‘‰ðŸ‘‰ This is the repository file for Ubuntu machine and any package we want to install should have the repository url in this file otherwise you won't be able to install the package\n\nNow, You can manually add the repository in this file or can add using command\n\n1. sudo add-apt-repository <repository-url>\n   Example: sudo add-apt-repository http://us.archive.ubuntu.com/ubuntu/\n\n2. sudo apt-key add <repository-url>\n\n3. apropos apt <repository-url>\n\n\nðŸ‘‰ðŸ‘‰ðŸ‘‰ Above step 1, 2, 3 does the same thing\n```","x":-550,"y":280,"width":810,"height":540,"color":"2"},
		{"id":"8e05015e3ba9eb58","type":"text","text":"# Fedora based command\n\n#### `rpm command`\n\n1. To list all the installed packages in machine\n\t* `sudo rpm -qa | grep samba` will show samba related packages\n\t* `sudo rpm -qa | wc -l` count number of installed packages\n2. To see whether package is installed or not\n\t* `sudo rpm -q <package-name>`  \n\t* Here `<Package-name>` should be exact and you can get exact package name using `rpm -qa | grep <starting-word-of-package-name>`\n3. To see the details of specific packages\n\t* `sudo rpm -qi <package-name>` \n\t* Here `<Package-name>` should be exact and you can get exact package name using `rpm -qa | grep <starting-word-of-package-name>` \n\t* `-qi` meaning query installed\n4. To install the package\n\t* `sudo rpm -ivh /BaseOS/Packages/<package-name>`\n\t* `-ivh` meaning `install-verbosh-hash-percentage`\n\t* `/BaseOS/Packages/<package-name>` is the path and you need to give like that `/BaseOs/Packages` is the directory present in machine where all packages is present and we can install it\n5. Removing packages\n\t* `rpm -e <package-name>`\n\t* `rpm -evh <package-name>`\n6. Upgrading or Patching package\n\t* `rpm -Uvh /BaseOS/Packages/<package-name>`\n\n#### Important \n* `ls /var/lib/rpm` this will show you the entire metadata information related to packages which installed using `rpm` . Also it keeps track of all files which enable complete removal of package\n\n\n# Sometime we need to use packages having `cpio` extension Let's convert `rpm` to `cpio`\n\n1. `rpm2cpio package-name-with-entire-path > name.cpio`\n\t* `<package-name-with-entire-path>` is the package name with entire path meaning path where it is\n\t* `name.cpio` here name can be anything it is put as dummy here\n\t* `rpm2cpio /BaseOS/Packages/zsh-5.5.1-6.e18_1.2.x86_64.rpm > zsh.cpio`\n2. If we want to see files present in package\n\t* `rpm2cpio zsh-5.5.1-6.e18_1.2.x86_64.rpm | cpio -t | head 5`\n\t* `zsh-5.5.1-6.e18_1.2.x86_64.rpm` is not only package name however package-name with entire path where it presents\n\n# Disadvantage of `rpm package`\nIf any package having dependencies and are not available on machine then it won't install the package and you need to install that dependency package first. ","x":1180,"y":-260,"width":880,"height":1500,"color":"1"},
		{"id":"879dd909839a6764","type":"text","text":"#### `yum command`\n* yum solves the `rpm` problem \n* `yum or dnf` both the command is same `dnf` is extended version of yum and have efficient dependency resolving algorithm\n\n\n1. `yum list` or `dnf list`\n\t* Show you the list of packages that present in repository\n2.  `yum list <package-name>` or `dnf list <package-name>`\n\t* Show the details of specific package if it present in repository\n3. `yum search <some-character-of-package-name>` or `dnf search <some-character-of-package-name>`\n\t* Search every package that matches the character\n4. `yum provides <file-path>`\n\t* To search a package containing certain files\n\t* `yum provides /usr/share/man/man5/passwd.5.gz`\n5. `yum list installed` or `yum list installed`\n\t* Will show you the all packages that installed in the machine\n\t* `yum list installed <package-name>` show you the specific package installed or not\n6. `yum install <package-name>`\n\t* Install the package\n7. `yum remove <package-name>` or `dnf remove <package-name>`\n\t* Remove the package\n8. `yum update` or `dnf update`\n\t* Patch the package\n\n# yum or dnf contain package groups \nPackage groups are nothing collection of packages\n\n1. `yum grouplist` or `dnf grouplist`\n\t* Show you the package groups present in our machine\n2. `yum groupinstall \"<group-package-name>\"`\n\t* Install the group package. Make sure to put the group package name in `\" \"` comma\n3. `yum groupremove \"<group-package-name>\"`\n\t* Remove the group package\n\n\n# yum repository file\n* `/etc/yum.repos.d/` This is the repository file where yum packages are configure. \n\n1. `ls /etc/yum.repos.d`\nOutput:\n![[Pasted image 20250119035731.png]]\n\n2. `cat CentOS-Stream-AppStream.repo`\nIf you open `AppStream.repo` or `BaseOS.repo` You will see the lot's of `repository URL` which are `CentOS server URL`  and Server of CentOS Keeps every packages that we want to install\n\nNOTE: Because CentOS is open source so `/etc/yum.repos.d` contains all repository file but in case of `Red Hat` we you don't have subscription then you need to configure the `Local repository`\n\n# yum main configuration file\n* `/etc/yum.conf`\n\n1. `cat /etc/yum.conf`\n   output is: ![[Pasted image 20250119042048.png]]\n\n# Changing Red-hat packages into debian based package\n`alien package` is used to convert packages. Every converted packages work in machine correctly this is not guaranteed. \n\n1. `sudo apt-get install alien`\n2. `alien --to-deb <package-name-with-path>`\n\t* `alien --to-deb epel-release-latest-8.noarch.rpm`\n\t* Here `.rpm` which is `Red-Hat` package is being converted into `debian package`\n\t* running this command convert `.rpm` package into `.deb` you can see using `ls command`\n3.  `alien --to-rpm <package-name-with-path>`\n\t* `alien --to-deb epel-release_8-15_all.deb`\n\n","x":2080,"y":-260,"width":880,"height":2060,"color":"1"},
		{"id":"22ef8af9fb0165df","x":3000,"y":-260,"width":1000,"height":1460,"color":"3","type":"text","text":"# How to configure `epel repository` in `Red-hat`\n`epel` ---> extra package repository for enterprise Linux.\nSo in fedora based distribution we have many additional packages that are not comes under local repository so we need to configure `epel` to install those packages\n\n1. `wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm`\n\t* This command download the `epel` package `.rpm` file. You can see in `/etc/yum.repos.d`\n2. `ls /etc/yum.repos.d`\n![[Pasted image 20250119044626.png]]\n\n3. Now we have `.rpm` file of `epel` let's install it\n4. `rpm -ivh epel-release-latest-8.noarch.rpm`\n\t* Make sure to give `package name with path` meaning if this `.rpm` package installed in `/tmp` directory then give \n\t  `rpm -ivh /tmp/ epel-release-latest-8.noarch.rpm`\n\n\n# Installing package using source code\nSource code is same for every distribution of using source code method is same for all\n\n### Method\n1. download the source code\n2. unzip the source code\n3. compile the source code\n\t* `gcc package` is needed for compilation\n\t* `gcc package` itself depend on `Development Tools` group package so make sure install it as well\n\nExample: let's download `putty source code`\n\n1. `yum install -y gcc`\n2. `yum groupinstall \"Development Tools\"`\n3. `wget https://the.earth.li/~sgtatham/putty/latest/putty-0.76.tar.gz` This will download putty source code as zip file\n4. `tar xvf putty-0.76.tar.gz`\n5. `ls` where you unzipped it. You will see the directory go inside it\n6. `cd putty-0.76`\n7. `ls` you will see lot's of file and directory. Execute `./configure` file\n8. `./configure`\n9. `make` This `make command` will start to compile it. Now install it after compilation\n10. `make install` It will install the package"}
	],
	"edges":[]
}