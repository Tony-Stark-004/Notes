{
	"nodes":[
		{"id":"2f548fa1f3099039","type":"text","text":"Input / Output command\n\nWhen we give instruction on CLI these three steps take place\n\n1. Standard input `stdin` = 0\n2. Standard output `stdout` = 1\n3. Standard Error `stderr` = 2","x":-440,"y":-348,"width":840,"height":228,"color":"3"},
		{"id":"b89f4ee8a525d813","type":"text","text":"Input `instruction code 0`","x":-500,"y":-496,"width":280,"height":60},
		{"id":"58172479b8d7d98c","type":"text","text":"Base Shell `CLI`\n\ntake input and give either `output or error`","x":-160,"y":-530,"width":250,"height":129},
		{"id":"ca03f8d06d2aae97","type":"text","text":"Output `instruction code 1`","x":156,"y":-540,"width":283,"height":60},
		{"id":"79cd41e60e814ef5","type":"text","text":"Error `instruction code 2`","x":162,"y":-436,"width":277,"height":60},
		{"id":"d01e3c19fb46d054","type":"text","text":"`use of instruction code`\n\ncase 1 `instruction code 1 (standard output)`\n\n1. `echo hello 1> output.txt` because command is right and we use `1> instruction` which tells if  this command runs without error then save in `output.txt` file\n2. `cat output.txt` give output `hello`\n\ncase 2 `instruction code 2 (standard error)`\n1. `zecho hello you 2> error.txt` because command is wrong so this command give us error on CLI but because we use `2> instruction` which tells if output of this command is error then save in `error.txt` file\n2. `cat error.txt` give output `bash: zecho: command not found...`\n\ncase 3 `instruction code 0 (standard input)`\n1. `echo hello < input.txt` give error if `input.txt not exist`\n2. `echo hello < input.txt` it give `hello` as output\n3. `cat < input.txt` or `cat input.txt` it give the content of input.txt as output. ****NOTE*** : `<` serve the RHS side as input ","x":-860,"y":-80,"width":800,"height":540,"color":"1"},
		{"id":"afc43e24129467e2","type":"text","text":"`noclobber option`\n1. for enable `set -o noclobber`\n2. for disable `set +o noclobber`\n\n3. `echo \"data is hell\" > output.txt` \n4. run `cat < output.txt` output would be `data is hell`\n5. `cal > output.txt` this will over-ride the file content\n6. run `cat < output.txt` output would be `calender of current month`\n\nto stop over-riding data we can use 2 approach\n1. `echo \"my content\" >> output.txt` it will append new content to file instead of over-riding\n2.  `set -o noclobber` enabling `noclobber` meaning it give error on over-riding file content\n3. `echo $-` output is --> `himBCHs` here `C in himBCHs` represents `noclobber is enabled`\n4. now if we do `echo oyesun > output.txt` giving error because `noclobber is enabled` \n\n****NOTE*** : `How to over-ride file content with enabled noclobber option`\n1. `echo \"data is everything >| output.txt\"` here `| pipe symbol` allow us to over-ride content","x":0,"y":-80,"width":780,"height":540,"color":"4"},
		{"id":"df26861bcd4d518a","type":"text","text":"`/dev/null` this file can `store infinite data` also you cannot `retrieve` any data from it\n\n****NOTE*** : `if we are not sure what's the output of command either error or correct output but we want to store result in single file`\n\n1. `echo \"oyesun\" < output.txt 2>&1` \n2. `cat output.txt` output would be `oyesun`\n3. now run `zecho \"oyeerror\" > output.txt 2>&1`  here command is wrong\n4. `cat output.txt` output would be `error: zecho is not command`\n\n`use of /dev/null file`\n1. `yum install -y zsh` this command installed the `zsh` in our devices but process of installing is visible on CLI\n2. to hide the process on CLI we can run `yum install -y zsh > /dev/null 2>&1` because the `process is not important` so no worries if we can't retrieve it\n\n","x":-860,"y":520,"width":940,"height":520,"color":"5"},
		{"id":"9c5029fd85ffd755","type":"text","text":"****NOTE*** : \n1. `>>` is used to prevent file content over-riding\n2. `<<` is known as `custom-marker` and used to `set custom instruction` for end writing in file Example :\n\t1. `cat <<stop > output.txt` now i can start filling content but as soon as i `type stop` it will lock me out of writing.","x":140,"y":520,"width":800,"height":220},
		{"id":"4df29819f8a34878","x":140,"y":760,"width":800,"height":360,"type":"text","text":"here we try to understand some advance way of redirection\n1. run `vim output.txt` and write content in it ****NOTE*** : `vim` used to make file or update file content\n2. `cat output.txt > snow.txt 2> error.txt` this command means the content of `output.txt` should go to `snow.txt` we command is correct and if command gives an error then output of this command should go to `error.txt`\n3. we can also write above command in this way `2> error.txt cat output.txt > snow.txt`\n4. also in this way `output.txt > snow.txt 2> error.txt cat`\n\n\n****IMPORTANT*** : `How can be nullyfy file content`\n1. `> file_name`\n2. `> output.txt`"}
	],
	"edges":[
		{"id":"a1872851e35b0313","fromNode":"b89f4ee8a525d813","fromSide":"right","toNode":"58172479b8d7d98c","toSide":"left"},
		{"id":"58b47f04c7f65768","fromNode":"58172479b8d7d98c","fromSide":"right","toNode":"ca03f8d06d2aae97","toSide":"left"},
		{"id":"f6b87b982acb751d","fromNode":"58172479b8d7d98c","fromSide":"right","toNode":"79cd41e60e814ef5","toSide":"left"}
	]
}