{
	"nodes":[
		{"id":"2ccffc26a590209c","type":"text","text":"Standard File permission","x":-539,"y":-201,"width":439,"height":60,"color":"4"},
		{"id":"507ef401c46bdd31","type":"text","text":"`inode number`  : The unique numbers assign to file or directory\n1. `df -i` this command shows total  `inode` available for particular file system and how much is being used till now\n\nPermissions `rwx` : \nr --> read\nw --> write\nx --> execute\n\nPermission Weightage\nr --> read --> 4\nw --> write --> 2\nx --> execute --> 1\n\nMaximum permission (Full permission) --> `rwx` = 4+2+1 = 7\nMinimum permission (No permission) = `---` --> 0+0+0 = 0\n\n****NOTE*** : The permission of file falls under `octal number system` so to give permission over any file user can use number ranging `(0-7)`  Example : \n1. `7` --> 4+2+1\n2. `5` --> 4+0+1\n\n","x":-820,"y":-120,"width":969,"height":560},
		{"id":"dc19c56c3e9dff88","type":"text","text":"****How can we give permission to any user over file***\n\n1. change `owner` of the file\n2. change `group owner` of the file\n3. Also, we can add user to that group of file\n4. give `other owner` permission \n   \n****How to change `owner`***\n#chown\nThis command is used to change `owner` of the file\n\n1. `chown user_name file_name`\n2. `chown user_name:group_name file_name` This command change `owner` and `group owner` at same time\n\n****How to change `group owner`***\n#chgrp\nThis command is used to change `group owner` of the file\n\n1. `chgrp group_name file_name`\n\n#chmod\nThis command is used to change the permission over the file\n\n1. `chmod 600 file_name` This means :\n\t1. `6` meaning `read-write` permission for `owner`\n\t2. `0` meaning `no permission` for `group owner`\n\t3. `0` meaning `no permission` for `others`\n\n****How to giver permission using alphabet*** \n\n1. `chmod u-x file_name` Here `u meaning user` and `-x` meaning remove executable access from user \n2. `chmod u+x file_name` giving executable permission to users\n3. `chmod u=rw file_name` giving only `read-write` permission to user\n4. `chmod g-x file_name` Here `g meaning group` and `-x` meaning remove executable access from group\n5. `chmod g-rwx file_name` removing all permissions from group \n6. `chmod o-x file_name` Here `o meaning others` and `-x` meaning remove executable access from others\n7. `chmod u=rw,g=r,o=r file_name` here \n\t1. `u=rw` meaning `read-write` permission to user\n\t2. `g=r` meaning  `read` permission to group\n\t3. `o=r` meaning `read` permission to other\n\n#umask \nUnique mask is the number used to set by default permission of a file on creation of file by Linux machine\n\n1. run `umask` output would be `0022`\n\nlets break `umask` default value which is `0022`\n1. `0` for special permission\n2. `0` for `user`\n3. `2` for  `group`\n4. `2` for `other`\n\n***IMPORTANT*** : How `umaks` set the default permission to file\n\n* By default on `file` making the max permission any `file` can have is `666` meaning `read-write` for `owner, group and other` Linux machine never give the `execute` permission by default we can although can give user `ececute` permission but Linux machine don't\n\n* By default on `directory` making the max permission any `directory` can have is `777` \n\nNow,\n\n****How `umask` value is used to calculate by default permission for file*** : \n\n1. Max by default value of file by Linux machine = `666`\n2. By-default value of `umask` = `022` \n3. if we subtract `these two values` we get : `666 - 022` = `644` meaning\n4. `read-write` for `user`\n5. `read` for `group`\n6. `read` for `others`\n\nWe can although change `umask values` for default permission of file while making\n1. run `usmak 0154`\n2. now, run `touch file.txt`\n3. now `file.txt` have `512` permission meaning \n\t1. `read-execute` for `user`  \n\t2. `execute` for `group`  \n\t3. `write` for `other`  \n\nHow it happen meaning how by default value is decided for file\nAnswer is : \n1. Max by default value of file by Linux machine = `666`\n2. and `umask value is` = `154` \n3. if we subtract `these two values` we get : `666 - 154` = `512` meaning\n\nMaking directory with default permission\n1. `mkdir -m 700 mydir` This makes directory fir permission `700`\n\nWhen we copy file in Linux then the permission of file can change while coping so to preserve the permission we can copy file using :\n1. `cp -p file_name_to_copy location_where_to_copy`","x":-820,"y":460,"width":969,"height":2360,"color":"1"},
		{"id":"c8096a6124d0291e","type":"text","text":"File Security ","x":-40,"y":-360,"width":440,"height":60,"color":"3"},
		{"id":"1d705855c65291a5","type":"text","text":"1. `umask` will show `0022` as output\n2. `umask -S` show `u=rwx,g=rx,o=rx` as output \n   \n****We can change `umask` values in 2 way***\n1. Numeric change\n\t1.  `umask 0044` \n2. By Symbolic change\n\t1. `umask -S u=rwx,g=,o=`\n\n#Stickybit \n1. This is not command\n2. `Stickybit` is a bit that, when set on a directory, allows only the files owner to delete files inside the directory.\n\n****How to set `Stickybit` in directory*** \n1. `chmod +t directory_name`  or\n2. `chmod 1777 directory_name` so you can use any of two method to apply `Stickybit` here `1` in `1777` shows `Stickybit` and `777` shows file permission\n3. When we set `Stickybit` on any directory then the directory permission contain `t` at the place of execute permission `x`. Example `drwx-rwx-rwt`\n4. It could be small `t` or Capital `T` \n5. small `t` meaning `Stickybit` with `execute` permission\n6. Capital `T`  meaning `Stickybit` without `execute` permission\n\nHow to remove `stickybit`\n1. `chmod -t directory_name`\n2. `chmod 00777 directory_name` give only permission without any special permission\n\n\n*NOTE*** : `t` or `T` can we seen in `other permission cloumn` Example: (`owner-group-other)` --> `drwx-rwx-rwt`\n1. Make sure to use `double zero` for removing special permission","x":220,"y":-120,"width":1200,"height":780},
		{"id":"12e815c82686b8f6","type":"text","text":"Advanced File permission","x":420,"y":-201,"width":439,"height":60,"color":"4"},
		{"id":"455999ee513c8800","type":"text","text":"#Setgidbit \n1. This is not command\n2. `Setgidbit` is a flag that, when set on a directory, allows only files inside directory whose group owner is the same as the directory's group owner.\n3. And, if you make any file inside directory the files have same group as directory by-default\n\n\n****How to set `setgidbit` in directory*** \n1. `chmod g+s directory_name`  or\n2. `chmod 2777 directory_name` so you can use any of two method to apply `Setgidbit` here `2` in `2777` shows `Setgidbit` and `777` shows file permission\n3. When we set `Setgidbit` on any directory then the directory permission contain `s` at the place of execute permission `x`. Example `drwx-rws-rwx`\n4. It could be small `s` or Capital `S` \n5. small `s` meaning `Setgidbit` with `execute` permission\n6. Capital `S`  meaning `Setgidbit` without `execute` permission\n\nHow to remove `setgidbit`\n1. `chmod g-s directory_name`\n2. `chmod 00777 directory_name` give only permission without any special permission\n\n****NOTE*** : `s` or `S` can we seen in `group permission cloumn` Example: (`owner-group-other)` --> `drwx-rws-rwx`","x":220,"y":680,"width":1200,"height":560},
		{"id":"ab1e1e338f360a61","type":"text","text":"How to find directory who have `setgidbit` permission\n1. `find / -type d -perm -2000 2> /dev/null`\n2. This command meaning :\n\t1. `find` is command\n\t2. `/` meaning finding along `root directory`\n\t3. `-type -d` meaning find only directory\n\t4. `-perm -2000` meaning permission with `-2000` look here `2` is for `setgidbit` and `000` is for `permission` because `umask` contain `4 digit`\n\t5. `2>/dev/null` meaning error or other thing goes to `/dev/null` directory as directory name suggest it absorb anything inside that directory.","x":220,"y":1260,"width":1200,"height":280},
		{"id":"22fcc7454f8ccd80","type":"text","text":"#Setuidbit \n1. This is not command\n2. `Setuid` is a permission set in Linux that allows a user to run a program with the same privileges as the owner of the file.\n3. So when you run file with any user it execute like owner of file or directory is executing this file or directory even though you are imposter\n\n\n****How to set `setgidbit` in directory*** \n1. `chmod u+s file_name`  without execute permission or\n2. `chmod u+x file_name` with execute permission\n3. `chmod 4777 file_name` so you can use any of two method to apply `Setuid` here `4` in `4777` shows `Setuid` and `777` shows file permission\n4. When we set `Setuid` on any directory then the directory permission contain `s` at the place of execute permission `x`. Example `drwx-rws-rwx`\n5. It could be small `s` or Capital `S` \n6. small `s` meaning `Setuid` with `execute` permission\n7. Capital `S`  meaning `Setuid` without `execute` permission\n\nHow to remove `setgidbit`\n1. `chmod u-s file_name`\n2. `chmod 00777 file_name` give only permission without any special permission\n\n****NOTE*** : `s` or `S` can we seen in `owner permission cloumn` Example: (`owner-group-other)` --> `drws-rwx-rwx`","x":220,"y":1560,"width":1200,"height":560},
		{"id":"e47a1fbaa59b1e09","type":"text","text":"How to find directory who have `setuidbit` permission\n1. `find /usr/bin -type f -perm -4000 2> /dev/null`\n2. This command meaning :\n\t1. `find` is command\n\t2. `/usr/bin` meaning searching inside `/usr/bin directory`\n\t3. `-type -f` meaning find only files\n\t4. `-perm -4000` meaning permission with `-4000` look here `4` is for `setgidbit` and `000` is for `permission` because `umask` contain `4 digit`\n\t5. `2>/dev/null` meaning error or other thing goes to `/dev/null` directory as directory name suggest it absorb anything inside that directory.","x":220,"y":2140,"width":1200,"height":280}
	],
	"edges":[
		{"id":"a4d1edffd5cc9519","fromNode":"c8096a6124d0291e","fromSide":"left","toNode":"2ccffc26a590209c","toSide":"top"},
		{"id":"c74a0e58174c8a93","fromNode":"c8096a6124d0291e","fromSide":"right","toNode":"12e815c82686b8f6","toSide":"top"}
	]
}