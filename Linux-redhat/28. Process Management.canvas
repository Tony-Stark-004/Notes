{
	"nodes":[
		{"id":"18c5453d3deac858","type":"text","text":"Process Management","x":-260,"y":-360,"width":540,"height":60,"color":"3"},
		{"id":"ea6ea6b028e36a21","type":"text","text":"****`Process`*** --> Process are those who utilizes `RAM` \n1. `INIT or SystemDd --> having id `1` and this is first process which kernel itself execute and don't have parent process\n2. `Daemon process` --> creates its own and never dies and we should not kill them\n3. `Zombie process` --> this process is dead process but shown on memory and not utilize any resources\n\n\n****How to see the process Id*** --> Each process has unique id\n1. `echo $$` so `$ symbol` holds the process ID \n2. `ps -C bash` we can also get process ID by this command here we want process id of `bash process`\n2. `ps -C sleep` here we want process id of `sleep process`\n3. `pidof bash` we can also get process ID by this command here we want process id of `bash process`\n4. `echo $PPID` parent process ID","x":-840,"y":-280,"width":967,"height":400},
		{"id":"3ae02fa899052f4a","type":"text","text":"***How to fork process***\n1. suppose you are running `bash shell` whose process ID can be seen `echo $$` and suppose process ID is `5686`\n2. to start forking run `zsh`\n3. now, run `echo $$ $PPID` the output is `9890 5686` where \n\t1. `9890` is process ID of `zsh shell`\n\t2. `5686` is process ID of `bash shell` which is parent of `zsh shell` so for `zsh shell` it is `parent process id`\n\nThis process is called forking\n\n\n****How to fork and execute*** : `This is different then forking in it the child process is started but id of it is some other process ID`\n***\n1. suppose you are running `bash shell` whose process ID can be seen `echo $$` and suppose process ID is `5686`\n2. to start forking run `zsh`\n3. now, run `echo $$ $PPID` the output is `9890 5686` where \n\t1. `9890` is process ID of `zsh shell`\n\t2. `5686` is process ID of `bash shell` which is parent of `zsh shell` so for `zsh shell` it is `parent process id`\n4. now run `exec bash` \n5. now run `echo $$` you will see the process id of this `bash shell is 9890` so here the process id of `zsh shell is assign to bash shell` and because `parent of zsh is bash and whose id is 5686` so here `this bash shell parent is also bash and whose id is 5686` \n\nThis process is called forking\n\n","x":160,"y":-280,"width":967,"height":720,"color":"1"},
		{"id":"61cfe3e1c9cca0cc","type":"text","text":"****How to see all the process that run on the system***\n1. `ps fx`\n2. also `ps -ef`\n3. `pgrep bash` this can show you `process Id of bash shell process running on system`\n\n***\n\n****How to see all process in tree form***\n1. `pstree`\n2. `pstree -p` will show to all processes with `process ID`\n\n***\n\n****If I want to see all process that start by particular user*** \n1. `pstree -p -u user_name`\n\n***\n\n*****If i want to see the particular process details***\n1. run `sleep 1200 &` this will start process `sleep` in background and give you `process Id` on display.  let's say `process id is 353454`\n2. now, run `pstree -p -s process_id`\n\t1.  so, `pstree -p -s 353454`\n\n***\n****How to see the background process***\n1. run `jobs`\n","x":-926,"y":140,"width":1053,"height":840},
		{"id":"53ae109b94fd0bd7","type":"text","text":"****How to kill the process*** \n1. `kill process_id`\n\n****How can you see, which process is stopped***\n1. `ps fx | grep process_id`","x":-926,"y":1000,"width":1053,"height":220},
		{"id":"fe46d948f435e60b","type":"text","text":"****Process State Codes & Signals***\n\n1. `D` --> `uninterruptible sleep` (Usually input-output)\n2. `R` --> `running or runnable`\n3. `S`  --> `interruptible sleep` (Waiting for an event to complete)\n4. `T` --> `Stopped` (Either by a `job control signal` or by you)\n5. `W` --> `paging`\n6. `X` --> `Dead`\n7. `Z` --> `defunct or Zomibie process`\n8. `I` --> `Idle state`\n\n****Significance of additional characters***\n1. `<` --> `high-priority`\n2. `N` --> `low-priority`\n3. `L` --> `has pages locked into memory`\n4. `s` --> `is a session leader`\n5. `L` --> `is multi treaded`\n6. `+` --> `is in the foreground process group`","x":160,"y":460,"width":967,"height":580,"color":"1"},
		{"id":"ce3868345cb2b55b","x":160,"y":1060,"width":967,"height":700,"type":"text","text":"#kill \nThis is command used to kill process \n1. `kill process_id`\n\n****Signals of kill command***\n1. `kill -l` to list all `signals`\n\nLet's start\n1. `1` --> `signal 1 forces the process to re-configured itself` Example : `kill -1 process_id`\n2. `15` --> `signal 15 used to kill the process.` Example : `kill -15 process_id`\n3. `9` --> `signal 9 used to kill the process but we tell kernal directly to stop the process`\n4. `18` --> `signal 18 used to start the process`\n5. `19` --> `signal 19 used to hault/stop the process`\n6. ``\n\n\n#strace \nThis command is used to `trace` the process\n1. `strace -p process_id`\n\n\n#pkill \nThis is command used to kill all the same of process at once\n1. `pkill sleep` meaning all `sleep` process is terminated at once\n2. `killall process_id_1 process_id_2` used to kill multiple process in single go\n"},
		{"id":"734405e3f1a97da0","x":-926,"y":1240,"width":1053,"height":400,"type":"text","text":"#fg \nThis command is used to bring process in `foreground`\n1. run `jobs` shows backgrounds process with `background ID`\n2. run `fg background_ID`\n\n\n#bg \nThis command is used to bring process in `foreground`\n2. run `bg process_ID`"}
	],
	"edges":[]
}