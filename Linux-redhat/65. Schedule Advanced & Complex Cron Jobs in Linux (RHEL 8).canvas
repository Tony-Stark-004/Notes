{
	"nodes":[
		{"id":"bcf5bf1e48ee07db","type":"text","text":"Important -->In Linux if you want to set time and date using `timedatectl` then you need to off the `NTP service`.\n`NTP service` is set time automatically. if you want to set time manually then you need to `off` the `NTP server`\n1. `timedatectl set-ntp false`\n2. `timedatectl set-time \"2021-06-13 23:28:00\"`\n3. `date` to verify\n\n# Advance cron jobs\n### case 1: Schedule a cron to execute at 2AM daily\n1. `crontab -e`\n2. `0 2 * * * /bin/bash /tmp/script.sh`\n\t1. `minutes hours days months days_of_week` these stars represents\n\t2. `/bin/base /tmp/script.sh` is the job which we want to execute using `bash shell`\n3. `crontab -l`\n\t1. to see the scheduled job\n4. `systemctl restart crond.service` to restart the service\n5. `tail -f /var/log/cron` will show all executed jobs\n","x":-565,"y":-240,"width":885,"height":640,"color":"1"},
		{"id":"170b85808b57383c","type":"text","text":"# Case 2: Schedule a cron to execute twice a day\n1. `crontab -e`\n2. `0 5,17 * * * /bin/bash /tmp/script.sh`\n\t1. at the place of hour we gave `5,17` meaning `5 meaning in the morning` and `17 meaning at evening`\n\n# Case 3: Schedule a cron to execute on every minute\n1. `ctontab -e`\n2. `* * * * * /bin/bash /tmp/script.sh`\n\n# Case4: Schedule a cron on every 10 minutes\n1. `ctontab -e`\n2. `*/10 * * * * /bin/bash /tmp/script.sh`\n\n# Case5: Schedule a cron to execute on selected months\n1. `ctontab -e`\n2. `* * * jan,may,aug * /bin/bash /tmp/script.sh` \n\t1. Job will execute `every minutes, every hours and every days` in `jan, may and aug`\n","x":360,"y":-240,"width":885,"height":640,"color":"5"},
		{"id":"dab3104cf975f7e0","type":"text","text":"# Schedule Advanced & Complex Cron Jobs in Linux (RHEL 8)","x":-220,"y":-343,"width":880,"height":83,"color":"3"},
		{"id":"46a20520c0c55739","type":"text","text":"# Case 6: Schedule a cron to execute on selected days at 5PM\n1. `crontab -e`\n2. `0 17 * * sun,fri /bin/bash /tmp/script.sh` job execute only on `friday and sunday at 5PM`\n3. `0 17 * * sun-fri /bin/bash /tmp/script.sh` job execute only on `friday, Saturday and sunday at 5PM`\n\n# Case 7: Schedule a cron to execute on 1st Sunday of every month at 2AM\n1. `ctontab -e`\n2. `0 2 * * sun[ $(date + %d) -le 07 ] && /bin/bash /tmp/script.sh` here `07` represents for Sunday\n\t1. `&&` means if `sun[$(date + %d) -le 07]` this condition is true then only execute `/tmp/script.sh`\n\t2. `crontab -l` for job listing\n\t3. `tail -f /var/log/cron` for verifying whether job is executed or not\n3. `0 2 1-7 * * [ 'date + \\%u' = 7] && echo Nehra classes are awesome` here `7` represents for Sunday\n\t1. `'date + \\%u'` is written in `back-tick` due to obsidian i won't be able to write it inside back-tick\n\t2. also these step no. 3 do exact as step no 2\n\t3. `see the days column` which is `1-7` and its range is from `1-30` so `1-7` meaning `1st week` and `8-14` means `2nd week` and so on \n# Case8: Schedule a cron on every 4 hours\n1. `ctontab -e`\n2. `0 */4 * * * /bin/bash /tmp/script.sh` This will execute job in every four hours\n3. `* */4 * * * /bin/bash /tmp/script.sh` this will execute per minutes\n\n# Case9: Schedule a cron to execute on every 30 seconds\nNote --> crontab does not allow seconds execution job but we have hack to do it\n1. `ctontab -e`\n2. `0 * * * * /bin/bash /tmp/script.sh` press enter and in next line\n3. `* * * * * sleep 30; /bin/bash /tmp/script.sh`\n4. Here first job will execute per minutes and second job will also  execute per minute but have 30 seconds delay \n\t1. so both job start at same time to execute after 1 minute 1st execute but 2nd job will not because of 30 seconds delay\n\t2. then after 30 seconds our 2nd job execute \n","x":-720,"y":420,"width":1040,"height":1000,"color":"5"},
		{"id":"fd7494ee183500c4","type":"text","text":"# Case 10: Schedule a multiple tasks in single cron\n1. `crontab -e`\n2. `* * * * * /scripts/script2.sh; /bin/bash /tmp/script.sh`\n\n# Case 11: Schedule a cron to execute on yearly basis\n1. `ctontab -e`\n2. `0 0 1 1 * /bin/bash /tmp/script.sh` it will execute job every year on `1st jan at 12:00 AM`\n3.  `@yearly /bin/bash /tmp/script.sh` it will execute job every year on `1st jan at 12:00 AM` we can do this way as well\n\n# Case12: Schedule a cron to execute on monthly basis\n1. `ctontab -e`\n2. `@monthly /bin/bash /tmp/script.sh` or \n3. `0 0 1 * * /bin/bash /tmp/script.sh`\n\n**NOTE** --> we can also use `@hourly` and `@daily` as well but it will start executing all task from `12:00 AM`\n1. `@reboot`\n\n# Case13: Schedule a cron to execute job at 11:30 on weekdays\n1. `ctontab -e`\n2. `30 23 * * 1-5 echo Nehra classes are awesome` \n\t1. `1-5` is the week days\n\n\n# Case14: Schedule a cron to execute job at 11:30 on 10 to 15 date\n1. `ctontab -e`\n2. `30 23 10-15 * * echo Nehra classes are awesome` \n\t1. `10-15` is the days\n\n","x":360,"y":420,"width":960,"height":1000,"color":"1"},
		{"id":"c3fef3a1581425bd","type":"text","text":"# How to take backup of scheduled jobs on crontab\n1. `crontab -l > cron-backup.txt`\n\t1. will store all crontab entry onto `cron-backup.txt` file\n\n# Now, How to recover all job from backup file\n1. `crontab cron-backup.txt`\n2. `crontab -l` you will see all the previous jobs","x":-515,"y":-680,"width":785,"height":310,"color":"4"},
		{"id":"4a391bd1dc181ce9","x":300,"y":-500,"width":522,"height":130,"color":"5","type":"text","text":"1. `touch \"time_$(date + %F)\"`\n\t1. This command is used to create dynamic file like\n\t2. `time_2022-02-19`"}
	],
	"edges":[]
}