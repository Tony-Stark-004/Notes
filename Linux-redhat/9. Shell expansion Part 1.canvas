{
	"nodes":[
		{"id":"0957cb3d9c0db04d","type":"text","text":"`echo`\n#echo command is used to `display content` and `creating file`\n\nExample :\n1. run `echo this is aditya` it display `this is aditya` on `CLI`\n2. `echo -e \"hello you! \\nMy name is aditya\"` here `-e` is used when we want `new-line \\n` or `tab space` \n3. `echo -e \"hello you! \\tMy name is aditya\"`\n\nOutput is \n`hello you!`\n`My name is aditya`\n\n****NOTE*** : \n1. `\\n` for new line\n2. `\\t` for tab-space\n","x":-640,"y":-920,"width":880,"height":460},
		{"id":"cb679c0a4aa88ba3","type":"text","text":"User defined variables\n\nhow to define :\n1. run `myvar=100`\n2. `echo $myvar` after running this commands it display 100 as output.\n\n****NOTE*** : \n1. `echo '$myvar'` wrapping in single quotes `''` gives $myvar as output\n2. `echo \"$myvar\"` wrapping in double quotes `\"\"` gives 100 as output.","x":100,"y":-140,"width":600,"height":320},
		{"id":"9fc808126b6cfe7d","type":"text","text":"System variables\n\n1. `echo $SHELL` display the shell that you are working on.\n2. `echo $HOSTNAME` display hostname of system\n3. `echo $PWD` display present working directory\n4. `echo $USER` display current user name\n5. `echo $?` give `0` if previous command has no error.","x":-640,"y":-140,"width":600,"height":240},
		{"id":"17a26267762d5c82","type":"text","text":"`alias`\n#alias is used to make shortcut of commands \n\nExample :\n1. `alias rm=rm -i` here we are setting the `alias` for `rm -i command`\n2. `rm text.txt` this means `rm -i text.txt` \n\n`unalias`\n#unalias is used to remove the shortcut.\n\nExample :\n1. `unalias rm` ","x":900,"y":-140,"width":600,"height":362},
		{"id":"5b953f48d898a865","type":"text","text":"`shell built-in command` commands that defined in shell itself is called shell built-in command\nExample :\n1. `cd command`\n2. `pwd command`\n\n`External command` commands that run because of its binaries files is called external command\nExample :\n1. `ls command`\n2. `lsblk command`\n\n`type`\n#type command is used to specify which command is `shell built-in command` and which command is `External command`\n\nExample : \n1. `type cd` output is `shell build-in command`\n","x":320,"y":-920,"width":760,"height":480},
		{"id":"2f720be81eca7c5f","type":"text","text":"`set -x`  is used to `enable` shell expansion means  after running `set -x`  and then  running any command you can see what happen in background with that command along with output of command\n\nExample :\n1. without `set -x`\n\t1. run `date` output is `Sat Jul 27 23:36:03 IST 2024`\n\t\n2. with `set -x`\n\t1. run `date` output is \n\t\t1. `Sat Jul 27 23:36:03 IST 2024` and \n\t\t2. `++ printf '\\033]0;%s@%s:%s\\007' root localhost '~'` \n\n`set +x` is used to `disable shell expansion`\n\n\n****NOTE***  : In Linux `-` is used to `enable` and `+` is used to `disable`\n","x":1140,"y":-920,"width":720,"height":480},
		{"id":"ed71d3fc8c88121e","type":"text","text":"Shell Expansion : When we run command on shell, shell manipulate the commands before paasing to kernel so that kernel understand the instruction this process is called shell expansion\n\nExample of shell : `bash shell`, `zsh`, `ksh` and `sh`\n","x":160,"y":-360,"width":680,"height":158,"color":"3"}
	],
	"edges":[]
}