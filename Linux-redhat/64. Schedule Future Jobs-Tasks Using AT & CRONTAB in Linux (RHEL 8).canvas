{
	"nodes":[
		{"id":"de32d3cd6b9350cd","type":"text","text":"# `at` command\nIt is used to schedule a non-repetitive job\n\n1. `at 09:08PM 09/08/24` scheduling job at `9:08 PM` on `09/08/2024`\n\t1. It will the interface to write the job\n\t2. `at> df -hT > /tmp/filesystem.txt` press enter and then `ctrl+d` to come out of it\n\t3. `atq` for seeing list of scheduled job\n2. `at 09:08PM` scheduling job at `9:08 PM` today\n3. `echo \"hello\" > /dev/pts/0 | at 09:10PM`\n\t1. single command can be used to assign the job timing and job\n\t2. `/dev/pts/0` is terminal name\n4. `at 09:10PM -f /tmp/script.sh` here we can also execute file in single single\n\t1. `-f` meaning file\n5. `at 09:10PM -f /tmp/script.sh > /dev/pts/0` if we want to display the execution of script file in terminal\n\n\n# mail triggering\n\n1. `at 09:10PM -m` press enter\n\t1. it will give the interface to schedule job \n\t2. `at> echo \"hello me\" > /dev/pts/0`\n\t3. here `-m` is used when schedule job do not trigger and don't give you the output then please mail it\n2. `at 09:10PM -M` press enter\n\t1. it will give the interface to schedule job \n\t2. `at> lsblk`\n\t3. here `-M` is used when schedule job trigger and give you to output then please mail it\n\n# Scheduling job at `YY:MM:DD:HH:MM:SS`\n\n1. `at -t 202406081209.30`\n\t1. `-t` is used for setting job in `YY:MM:DD:HH:MM:SS` format\n\t2. `2024` is year\n\t3. `06` is month meaning `july`\n\t4. `08` is date \n\t5. `12` is hours\n\t6. `09` is minutes\n\t7. `.30` is seconds","x":-381,"y":-260,"width":861,"height":1080,"color":"5"},
		{"id":"0cc93d5c2f7d3a79","type":"text","text":"# `batch` command\nHere `at command` is used with the respective of time but `batch command` is used with respect to `load on system`. also it runs when average loads drops below 0.8 or else you can define custom average loads\n\n1. `echo \"hello me\" | batch`\n\t1. it will execute when system average load drops below `0.8`\n2. `tail /var/log/cron`\n3. run `batch`\n\t1. it will give you the interface to schedule the job\n\t2. `at> date` press enter and `ctrl+d` to come out of it\n\t3. Note you are running `batch` but interface show you `at>`\n4. `tty` is used to see the current terminal like\n\t1. `/dev/pts/0`\n\t2. `/dev/pts/1`\n5. `atq` is used to see the list of scheduled job\n\n# Scheduling job and making separate job queue\n\n1. `at monday +2 hours -q L` press enter\n\t1. `-q` is giving for queue\n\t2. `L` is queue name\n2. it will give you the interface to schedule the job\n\t1. `at> date` press enter and `ctrl+d` to come out of it\n3. `at monday +4 -q P`\n4. when we run `atq`\n\t1. we will see the `scheduled job with queue name`\n\n# Seeing complete job details on terminal\n\n1. `at -C job_number`\n\t1. `at -C 50`\n2. `Job number` we can get running `atq command`\n\n***IMPORTANT*** : `/var/spool/at` is the directory where all the pending job is present as the file and the details that we get on running `at -C 50` is basically the one of the pending job files that present inside `/var/spool/at`.\n1. `cd /var/spool/at`\n2. `ls -l` will show the pending jobs file and you can get the all information just looking the `hextypecode` of file\n\t1. like `L0003201a24f51`\n\t\t1. `L` is job queue name\n\t\t2. `000320` second to seventh digit represents the job number\n\t\t3. `1a24f51` and the rest of it represent the time\n\n","x":500,"y":-260,"width":880,"height":1220,"color":"4"},
		{"id":"f6ee5e34d1be6939","type":"text","text":"# `cron` command\nIt is used to schedule the `repetitive` and `non-repetitive` jobs\n\n1. you need package install in your machine to use it\n2. `rpm -q crontabs` or `yum list installed crontabs` or `dnf list installed crontabs` you can check whether `crontabs` package is installed or not\n3. `yum install -y crontabs` to install it \n4. `systemctl status crond.service` \n\t1. to check whether its `daemon service` is running and active or not\n5. `systemctl start crond.service`\n\t1. to run the `daemon service` if not running and not active\n\n### NOTE : \n`crontab` is the file where we do the entry of our job and it is actually `/etc/crontab` . This is actual file and we do the entry of job inside it,\nWe do not to the edit the file directly using `vim editor` we use `-e` option with `crontab command` to edit the `/etc/crontab` file \n\nAlso the job should be in this formatted `* * * * *`\n\t1. `*` first star indicates `day of week (0 - 6) sunday=0 and monday=6`\n\t2. `*` second star indicates `month (1 - 12)`\n\t3. `*` third star indicates `day of month (1 - 31)`\n\t4. `*` fourth star indicates `hour (0 - 23)`\n\t5. `*` fifth star indicates `minute (0 - 59)`\n\n1. `crontab -e` press enter this will open file `/etc/crontab` in `vim editor` and then we can schedule job\n\t1. `-e` meaning edit\n2. `37 21 * * * echo Nehra classes are awesome > /dev/pts/0`\n\t1. `37` is fifth entry which indicates `minute (0 - 59)`\n\t2. `21` is fourth entry which indicates `hour (0 - 23)`\n\t3. `*` third entry is empty\n\t4. `*` fourth entry is empty\n\t5. `*` fifth entry is empty\n\t6. `echo Nehra classes are awesome > /dev/pts/0` is the job that we want to schedule at `37 21 * * *` meaning\n\t7. `21` meaning `9 PM` and `37` meaning `37 minutes`\n\t8. do `echo Nehra classes are awesome > /dev/pts/0` at `9:37 PM`\n\t9. and this `37 21 * * *` is not one time jobs it execute daily at `9:37 PM` so it goes inside `/etc/cron.daily` file\n3. `crontab -l` \n\t1. will show all the scheduled job like `atq command`\n4. `ls -ld /etc/cron.*` this command give files like\n\t1. `/etc/cron.d` special and complex jobs go inside this\n\t2. `/etc/cron.daily` all daily scheduled jobs come inside this directory\n\t3. `/etc/cron.deny` If we want to deny user to access crontab or user can't schedule job then do entry inside this\n\t4. `/etc/cron.hourly` hourly scheduled jobs come inside this\n\t5. `/etc/cron.monthly` monthly scheduled jobs come inside this\n\t6. `/etc/cron.weekly` weekly scheduled jobs come inside this\n\nHere,\n1. `2 * * * *` this means `each 2nd minuts of every hours` execute job\n2. `*/2 * * * *` this means for every `2 minutes` runs the job\n3. `* * * * *` this means `every minute` execute the job","x":1420,"y":-260,"width":1360,"height":1460,"color":"5"},
		{"id":"50ad56bc60e5a05a","type":"text","text":"# Schedule Future Jobs/Tasks Using AT & CRONTAB in Linux (RHEL 8)","x":280,"y":-360,"width":1000,"height":74,"color":"3"},
		{"id":"a5d8c4a2124b9666","type":"text","text":"1. `crontab -l -u root` will list all job scheduled by `root`\n\t1. `-u` meaning user\n\t2. give error if you are not `root user` or you don't have privileged\n\n\n# How to remove crontab task\n1. `crontab -r`\n2. `crontab -r -u vikasnehra`\n\t1. will remove all jobs scheduled by `vikasnehra`\n\n\n***NOTE*** : Also, inside the `/etc/crontab` you also scheduled job for event like\n1. `when our machine will restart`\n\t1. `crontab -e` will show the interface to write\n\t\t1. `@reboot date >> /tmp/date.txt`\n2. `when our machine will shutdown` \nTo scheduled job for event like this you can open `cat /etc/crontab` it will show you the way to that\n\n# How to restrict user to scheduling job\n\n1. `vim /etc/cron.deny` will open the file `cron.deny` in `vim editor`\n\t1. `vikasnehra` now exit the file. This will rescript `vikasnehra` to scheduled job in `crontab`\n\t2. now you `vikasnehra` run `crontab -e` give error\n","x":1420,"y":-986,"width":880,"height":700,"color":"3"},
		{"id":"41415241a3ccc2b1","type":"text","text":"# `anacron` command\nNote --> `crontab` is used for machine which is running `24x7` and `anacrontab` is used for those machine that not run `24x7` and can be shut-down whenever user wants\n\n1. `cat /etc/anacrontab` this is file where we do the entry of the jobs. This also guide you to how we can schedule job\n\n# let's schedule job\n\n1. `vim /etc/anacrontab` and do the entry like\n\t1. `@daily   10   example.daily   /bin/bash   /tmp/script.sh`\n\t\t1. `@daily` means we want daily to do this job\n\t\t2. `10` indicates `delay time` to execute this job it will take `10 minutes` or say it will execute after `10 min`\n\t\t3. `example.daily` indicated job-identifier\n\t\t4. `/bin/bash` is the terminal\n\t\t5. `/tmp/script.sh` is the job that we want to execute\n2. now run `anacron -T` do let system know about our entry\n3. `anacron -d` this will execute all the scheduled job in `/etc/anacrontab` immediately\n3. `anacron -d -f` will run forcefully\n4. now run `cd /var/spool/anacron`\n\t1. `ls -l` will show\n\t\t1. `example.daily` along with `cron.daily and so on`\n\n\n### `/var/spool/anacron` \nthis is the where all the `scheduled jobs` go\n1. `cd /var/spool/anacron`\n2. `ls -l` this will show files where `anacron jobs go`\n\t1. `cron.daily`\n\t2. `cron.monthly`\n\t3. `cron.weekly`","x":420,"y":-1320,"width":920,"height":920,"color":"1"}
	],
	"edges":[]
}