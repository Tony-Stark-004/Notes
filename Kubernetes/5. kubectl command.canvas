{
	"nodes":[
		{"id":"95d8949807710b49","type":"text","text":"# Kubectl command","x":-300,"y":-324,"width":540,"height":60,"color":"3"},
		{"id":"0e760a768ec46154","type":"text","text":"# Basic kubectl command\n\n```\n1. kubectl get nodes\n\ndescription: Give the status of cluster\n```\n\n```\n2. kubectl get pod\n\ndescription: Give you the pod details\n```\n\n```\n3. kubectl get services\n\ndescription: Give you the services detail\n```\n\n```\n4. kubectl create -h\n\ndescription: Give you help related to create command also create is used to create components\n```\n\n##### How to create Pod\n```\n5. kubectl create delpoyment nginx-deployment --image=nginx\n\nNow we creating Pod here but we are using deployment component because Pod is smallest unit in Kubernetes and it is abstracted. delpoyment is the blueprint for creating Pods and abstraction over Pod so when we create deployment Pod is automatically created basically it is the way to create Pod\n\nalso,\n\n* nginx-deployment is my Pod name like container name we give for docker container\n* --image=nginx is the docker image which is pulled from docker hub\n\nNote: Pod is nothing a docker container wrapper meaning it is container\n\n1. kubectl get deployment\ndescription: Give the deployment component which we created\n\n2. kubectl get pod\ndescription: Give you the pod details as we created deployment which created Pod automatically\n\n3. kubectl get replicaset\ndescription: It is the layer between deployment and Pod and it is automatically manage by deployment. Also Replicaset is managing the replica of a Pod\n\nNOTE: We never change in Pod kubernetes manages everything for us we only update or manage deployment directly\n\n```","x":-740,"y":-240,"width":790,"height":1340,"color":"4"},
		{"id":"b6e72aeed0644888","type":"text","text":"# Basic kubectl command\n\n```\n6. kubectl edit deployment nginx-deployment\n\nwe get an autogenerated deployment configuration file with default values and also it opens in vi editor so you can edit or change if you want\n\ndescription: here we are editing our deployment component whose name is \nnginx-deployment which we created in step-5\n```\n\n```\n7. kubectl logs <pod-name>\n\ndescription: It will logs what application running inside the pod actually loged\n```\n\n```\n8. kubectl describe pod <pod-name>\n\ndescription: Give you the brief Pod details like Pod state change and all\n```\n\n```\n9. kubectl exec -it <pod-name> -- bin/bash\n\ndescription: when you want to debug when something is not working and we just want to check what's going onto the Pod\n\nafter running the command you get inside the application container which bash shell\nNow, you can run all Linux command\n\npress exit to come out of it\n```\n\n##### How to delete Deployment and apply configuration file\n```\n10. kubectl delete delpoyment <deployment-name>\n\nNote: kubectl get deployment --> running this command you will get the deployment name\n\nAlso, deleting deployment also delete respective Pod and Replicaset\n```\n\n#### apply configure file\n```\n11. kubectl apply -f config_file.yml     ----- for creating and updating ------\n12. kubectl delete -f config_file.yml    ------ for deleting ------- \n\nhere -f meaning file\n\ndescription: It is impractical to write all the configuration commands on kubectl cli while creating kubernetes components like deployment, services and all so we keep all configuration in .yaml file and execute .yaml file using apply command \n```","x":80,"y":-240,"width":820,"height":1340,"color":"5"}
	],
	"edges":[]
}