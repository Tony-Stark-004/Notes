{
	"nodes":[
		{"id":"f6b92dcf5913560a","type":"text","text":"# Ingress configuration file\n* let say file name is `dashboard-ingress.yaml`\n\n```\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n\tname: dashboard-ingress\n\tnamespace: kubernetes-dashboard\nspec:\n\trules:\n\t- host: dashboard.com\n\t  http:\n\t\t  paths:\n\t\t  - backend: \n\t\t\t    serviceName: dashboard-internal-service\n\t\t\t    servicePort: 80\n```\n\n* `spec` attribute is where all `routing rules` are written and for implementation of this rule we need `Ingress controller Pod` without `Ingress controller` there is no meaning of `Ingress` component. `Ingress controller` evaluates and processes Ingress rules and also manages redirections. It is the Ingress controller who decide which request it forwarded to which `ingress` \n\t* `Kubernetes Nginx Ingress controller` provider by Kubernetes itself. But there are many third party implementation (`Ingress controller`) as well\n***\n\n* `http attribute` meaning incoming request gets forwarded to internal service\n***\n\n","x":-680,"y":-260,"width":840,"height":840,"color":"5"},
		{"id":"4dbcc35189963066","type":"text","text":"# Kubernetes Ingress","x":-200,"y":-340,"width":340,"height":67,"color":"3"},
		{"id":"05f2feb786f7b321","type":"text","text":"# Internal Service","x":-325,"y":-489,"width":250,"height":100},
		{"id":"f3496e1502a95cd0","type":"text","text":"# Ingress","x":0,"y":-525,"width":180,"height":86},
		{"id":"0315a0339c6de494","type":"text","text":"# Ingress controller Pod\n\n* ingress rule implementation","x":-250,"y":-720,"width":390,"height":128},
		{"id":"4be2d789b887e038","type":"text","text":"# Pod","x":-580,"y":-439,"width":150,"height":86},
		{"id":"c7b90ea15bc2e0a8","type":"text","text":"# Entrypoint\n\n** Like Load balancer and proxy server\n\nNOTE: Entrypoint is present outside the cluster","x":240,"y":-739,"width":380,"height":211},
		{"id":"1180bee02b502166","type":"text","text":"# Browser\n\n* http://138.145.345.245:80\n\t* using external service without ingress\n##### And\n\n* http://dashboard.com\n\t* using ingress \n\t* ingress use internal service component\n\t* `dashboard.com` comes from Ingress configuration file see the `host attribute`","x":720,"y":-717,"width":500,"height":377},
		{"id":"14f8f0334447e276","type":"text","text":"# Important thing while making Ingress config file\n\n1. `host: myname.com`\n\t* here `myname.com` is domain name which should be valid. It can't be anything\n\t* map domain name to node's IP address which is the entry-point or can config the server outside the cluster and make it entry-point\n***\n2. To use Kubernetes Ingress we need to configure entry-point and one way to do that is to config proxy server externally meaning outside the cluster so proxy server is accessible and none of our Kubernetes cluster component is accessible by any one\n\t* we can also use Load balancer that is provided by cloud in this case we don't need to setup entry point it take request from browser and forward to `Ingress controller` then Ingress controller take care ","x":180,"y":-260,"width":790,"height":460},
		{"id":"608dbbdf02d49585","type":"text","text":"# Internal service configuration file\n\n* let say file name is `dashboard-service.yaml`\n\n```\napiVersion: apps/v1\nkind: Service\nmetadata:\n\tname: dashboard-internal-service\n\tnamespace: kubernetes-dashboard\nspec: \n\tselector: \n\t\tapp: dashboard-deployment\n\tports: \n\t\t- protocol: TCP\n\t\t  port: 80\n\t\t  targetPort: 8081\t\n```\n\nThis internal service is used in `Ingress configuration file`","x":-1320,"y":-260,"width":620,"height":523,"color":"4"},
		{"id":"f17aee37d60a4399","type":"text","text":"# let's simulate in minikube\n\n1. install Ingress controller\n\n```\n1. minikube addons enable ingress\n\nAutomatically starts the Kubernetes Nginx implementation of Ingress Controller\n\n2. kubectl pod -n kube-system\n****** kube-system is namespace which is provided by Kubernetes ******\n\nso this command shows the Pod in kube-system namespace and there you will see the nginx-ingress-controller pod\n```\n\n2. suppose we have created `deployment meaning Pod` and `internal Service` inside the `Kubernetes-dashboard` which is the namespace specific to `minikube`\n\n```\n1. kubectl get all -n Kubernetes-dashboard\n\n***** will show all components inside Kubernetes-dashboard namespace *****\n\n*********** Make sure Pod, Service and Ingress is in same namespace **********\n```\n\n3. Now `dashboard.com` domain name didn't register anywhere and didn't configure anywhere which IP address this hostname resolve to \n\n```\n1. kubectl apply -f dashboard-ingress.yaml\n****** creating Ingress ******\n\n2. kubectl get ingress -n kubernetes-dashboard --watch\n******* This will list the ingress inside the kubernetes-dashboard namespace. Now you will see the IP address column for Ingress component copy it because this is IP for which we resolve our domain or host name ******\n\n3. vim /etc/hosts\n******* It will open the /etc/hosts file in vim editor let do the entry for resolving hostname with IP that we copied *****\n\n192.168.64.5 dashboard.com   \nthis entry you need to do and then save it and exit from vim editor. Suppose 192.168.64.5 is copied IP of Ingress\n```\n\n4.  Ingress Default backend\n\t* When you enter URL path and you didn't define path in Ingress rule then by default `ingress default backend` take care of it and shows you the error page you can customize it as well \n\t\n```\n1. kubectl describe ingress <ingress-name> -n kubernetes-dashboard\n\t* kubectl describe ingress dashboard-ingress -n kubernetes-dashboard \n\nThis will shows the ingress dashboard-ingress detail and there you will see service as\n\t****** Default backend: default-http-backend:80 ********\n\n\nExample: http://dashboard.com/hello this path is not defiend in Ingress rule so default-http-backend:80 service will take care this request \n```","x":180,"y":224,"width":1060,"height":1356,"color":"3"},
		{"id":"46d76765e5b1ef57","type":"text","text":"# Custom default-http-backend service \n* let say file name is `default-http-backend-service.yaml`\n\n```\napiVersion: apps/v1\nkind: Service\nmetadata:\n\tname: default-http-backend\nspec: \n\tselector: \n\t\tapp: default-response-app\n\tports: \n\t\t- protocol: TCP\n\t\t  port: 80\n\t\t  targetPort: 8081\t\n```\n\nHere on incorrect route request this service will handle the request and give the response page that is present inside `default-response-app Pod container`","x":1280,"y":1120,"width":620,"height":523,"color":"4"},
		{"id":"082c497c1d1391dd","type":"text","text":"# Multiple sub-domain or domains\n\n```\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n\tname: simple-fanout-example-ingress\n\tnamespace: kubernetes-dashboard\n\tannotations:\n\t\tnginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n\trules:\n\t- host: analytics.myapp.com\n\t  http:\n\t\t  paths:\n\t\t  - backend: \n\t\t\t    serviceName: analytics-service\n\t\t\t    servicePort: 3000\n\t- host: shopping.myapp.com\n\t  http:\n\t\t  paths:\n\t\t  - backend: \n\t\t\t    serviceName: shopping-service\n\t\t\t    servicePort: 8080\n```\n\n* Here `http://analytics.myapp.com` \n* `http://shopping.myapp.com` ","x":2240,"y":-340,"width":840,"height":840,"color":"2"},
		{"id":"bc719c4dcf716213","type":"text","text":"# Multiple path for same host\n\n```\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n\tname: simple-fanout-example-ingress\n\tnamespace: kubernetes-dashboard\n\tannotations:\n\t\tnginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n\trules:\n\t- host: myapp.com\n\t  http:\n\t\t  paths:\n\t\t  - path: /analytics\n\t\t  - backend: \n\t\t\t    serviceName: analytics-service\n\t\t\t    servicePort: 3000\n\t\t  - path: /shopping \n\t\t  - backend:\n\t\t\t    serviceName: shopping-service\n\t\t\t    servicePort: 8080\n```\n\n* Here `http://myapp.com` \n* `http://myapp.com/analytics`\n* `http://myapp.com/shopping` all paths are valid and have different Pod and Services for each route","x":1360,"y":-340,"width":840,"height":840,"color":"4"},
		{"id":"48f7199b3d8ecfd2","type":"text","text":"# Configuring TLS Certificate\n\n```\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n\tname: simple-fanout-example-ingress\n\tnamespace: default\n\tannotations:\n\t\tnginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n\ttls: \n\t- hosts: \n\t- myapp.com\n\t  secretName: myapp-secret-tls\n\trules:\n\t- host: myapp.com\n\t  http:\n\t\t  paths:\n\t\t  - path: /\n\t\t  - backend: \n\t\t\t    serviceName: myapp-internal-service\n\t\t\t    servicePort: 8080\n```\n\n* We need to add `tls attribute` for adding `tls` certificate and have to give `tls --> hosts attribute value same as rules --> host value` \n\n# `myapp-secret-tls` Secret file\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n\tname: myapp-secret-tls\n\tnamespace: default\ndata: \n\ttls.crt: base64 encoded cert\n\ttls.key: base64 encoded key\ntype: kubernetes.io/tls\n  \n```\n\nHere \n1. `tls.crt` and `tls.key` key name is exactly the same we can't give any key name \n2. and value of it are actual file content `Not file path/locations`\n3. Secret component must be in the `same namespace` as the `Ingress component`","x":3120,"y":-340,"width":840,"height":1220,"color":"3"}
	],
	"edges":[
		{"id":"895c4bd0f44b482b","fromNode":"0315a0339c6de494","fromSide":"bottom","toNode":"f3496e1502a95cd0","toSide":"top","color":"4","label":"3"},
		{"id":"2a697303e635cc35","fromNode":"c7b90ea15bc2e0a8","fromSide":"left","toNode":"0315a0339c6de494","toSide":"right","color":"4","label":"2"},
		{"id":"43e0253c337dc614","fromNode":"1180bee02b502166","fromSide":"left","toNode":"c7b90ea15bc2e0a8","toSide":"right","color":"4","label":"request"},
		{"id":"f5bd0711fc3ab459","fromNode":"f3496e1502a95cd0","fromSide":"left","toNode":"05f2feb786f7b321","toSide":"right","color":"4","label":"4"},
		{"id":"f565a389f6d94c12","fromNode":"05f2feb786f7b321","fromSide":"left","toNode":"4be2d789b887e038","toSide":"right","color":"4","label":"5"}
	]
}