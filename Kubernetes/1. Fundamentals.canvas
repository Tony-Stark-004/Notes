{
	"nodes":[
		{"id":"e166b9db48965b2b","type":"text","text":"# Kubernetes Fundamentals","x":-280,"y":-340,"width":495,"height":75,"color":"3"},
		{"id":"3c59b6a44e05716c","type":"text","text":"# Kubernetes\n* Open source container orchestration tool\n* Developed by Google\n* Helps you manage containerized applications in different deployment environments \n\t* Deployment environments can be physical server or can be virtual server or cloud server\n\n\n# What features do orchestration tool offer ?\n* High availability or not downtime\n* Scalability or high performance\n* Disaster recovery --- backup and restore","x":-793,"y":-760,"width":761,"height":400},
		{"id":"5de91feb063fd269","type":"text","text":"# Kubernetes Basic Architecture\nKubernetes cluster have two kinds of node\n* Master nodes\n* worker nodes\n\n### Master nodes\n\nBasically master nodes is entry point for cluster and manages the worker nodes. The feature are\n* Entrypoint to K8S cluster ----- `API server`\n* Keeps tracks of whats happening in the cluster ----- `Controller manager`\n* ensure pods placement like which worker node have less loads on it so it scheduled tasks keeping that in mind ----- `Schedular`\n* Kubernetes backing store ----- `etcd`\n\n\n### Worker nodes\n\nWorker nodes are the one which perform actual task they contain multiple docker files for different applications and each worker nodes has `kubelet process` running on it \n\n`Kubelet process` is the Kubernetes process which actually makes it possible for cluster to communicate with each other and executes tasks on node like running application\n\n### Virtual network\n* Virtual network makes possible for communicate worker nodes with master nodes\n* Virtual network turns all nodes inside the cluster into one powerful machines\n","x":-900,"y":-240,"width":813,"height":800,"color":"2"},
		{"id":"fa5a38bcc3787fd0","type":"text","text":"# Virtual network","x":0,"y":-20,"width":680,"height":60,"color":"3"},
		{"id":"2891e2a524621dbe","type":"text","text":"##### Worker node 2\n* docker container 1\n* docker container 2\n\nKubelet process","x":222,"y":57,"width":250,"height":206,"color":"4"},
		{"id":"c7fda5c847e4c0a2","type":"text","text":"##### Worker node 3\n* docker container 1\n* docker container 2\n\nKubelet process","x":480,"y":57,"width":250,"height":206,"color":"4"},
		{"id":"85a71e09ec558a5c","type":"text","text":"##### Worker node 1\n* docker container 1\n* docker container 2\n\nKubelet process","x":-41,"y":57,"width":250,"height":206,"color":"4"},
		{"id":"7542b996e4c0d4b6","type":"text","text":"###### Master node 1\n* `Api server`\n* `controller manager`\n* `Schedular`\n* `etcd`","x":77,"y":-240,"width":263,"height":197,"color":"3"},
		{"id":"0099a40e26310863","type":"text","text":"###### Master node 2\n* `Api server`\n* `controller manager`\n* `Schedular`\n* `etcd`","x":349,"y":-240,"width":263,"height":197,"color":"2"},
		{"id":"22eaa6852769d8d2","type":"text","text":"# Kubernetes Pod Container\n* Pod container is smallest unit in Kubernetes which user configured and interact with.\n* Pod container in Kubernetes is like container in docker and present in worker nodes\n* Pod container is wrapper of docker container meaning all docker container is present inside Pod container and it is good practice to have one Pod container for one docker application\n* Each Pod container have it own IP address and it is assigned by virtual network but because Pod container has lifecycle it get created and destroyed so each time IP can be different on creation so we use `SERVICES` instead of IP which is permanent to communicate with other Pod container\n\n# Services component of Kubernetes\n* It is permanent IP addresses and alternative to dynamic IP addresses \n* It is load balancer as well\n\n\nNOTE: \n* We don't actually configured and create containers inside of Kubernetes clusters we only work with of Pod which is abstraction layer over docker container\n* Pod is component of Kubernetes that manages container running inside it","x":0,"y":-940,"width":761,"height":580}
	],
	"edges":[]
}