{
	"nodes":[
		{"id":"c59649d6d9b4003c","type":"text","text":"Note: \n* We can create namespace using configuration file and also can also be created using command line \n\n* It is recommended to use configuration file for creating namespaces\n","x":-780,"y":-540,"width":480,"height":200,"color":"4"},
		{"id":"f022996906ea9081","type":"text","text":"# Namespaces\n* It organizes resources in namespaces\n\t* resources meaning: `Deployment, Pod, ConfigMap, Services, Ingress and all`\n* you can understand it like `Virtual cluster inside a cluster`\n\n\n# 4 Namespaces that created while creating node or cluster\n1. `default` \n\t* This namespace is used to create resources in it but this is default namespace that automatically created and every resource that we create goes in it\n\t* It is recommend to create our own name space so that we can separate our resources\n```\n1. kubectl create namespace my-namespace\n* It will create the namespace in cluster\n\n2. kubectl get namespace\n* it will list the namespaces present in cluster\n```\n1. `kube-node-lease`\n\t* This namespace holds the information of `heartbeats of nodes`. Each node associate with object that contain the information about that nodes availability\n2. `kube-public`\n\t* This namespace container publicly accessible data. It has `ConfigMap` contain cluster information which is accessible without authentication \n```\n1. kubectl cluster-info\n\nit will the details which is present in ConfigMap of kube-public\n```\n\n4. `kube-system`\n\t* This namespace is not meant for our use meaning do not create or modify in `kube-system namespace`\n\t* The component that deployed in `kube-system namespace` are system processes. like master processes and kubectl processes","x":-820,"y":-240,"width":940,"height":960,"color":"3"},
		{"id":"4e6b221813cab2e0","type":"text","text":"# Why to use Namespaces\n\n1. Remember Kubernetes cluster has `default` namespace where all the resources goes by default. because every resource go inside that namespace there is no distinction which resource belongs to which also at some time it gonna be filled and then it face difficulties to overview what's in there. better way to make different different namespace and grouped the resources\n\t* Like database namespace where only database related resources are present\n\t* Monitoring namespace where only monitoring related resources are present\n***\n\n2. Conflict: many teams, same application\n\t* if different teams working on same application and every component of Kubernetes goes inside the `default namespace` then having two different component with same name can cause conflict and override the other deployment configuration\n\t* So it is recommended to have namespace for each team so there is no conflict\n***\n\n3. Resource sharing: Staging and Deployment\n\t* Suppose we have staging and development environment in same cluster and both environment use same service then it is better to make one namespace for service and this namespace of service is shared with both environment instead of making twice in their respective environment\n\n***\n\n4. Access and resource Limit on namespaces\n\t* we can make different different namespace and apply permission on it so only valid Team or User can access their own resources\n\t* We can also limit the resources like CPU and RAM per namespaces. So resources consumption can also be controlled in namespace\n\nSo Conclusion is\n* Structure your components\n* Avoid conflicts between teams\n* Share services between different environments\n* Access and Resources Limits on Namespaces Level\n","x":160,"y":-240,"width":940,"height":960,"color":"3"},
		{"id":"d610253a40e1116f","type":"text","text":"# Characteristics of Namespaces\n\n1. You can't access most resources from another Namespace\n\t* `ConfigMap` and `Secret` components can not be shared by Namespace. If you need same `ConfigMap` and `Secret` present in `NameSpace A` on `Namespace B`  then you have to make it twice you can't use `Namespace A` ConfigMap and Secret component in `Namespace B`\n\t* `Service component of Kubernetes` can be shared in any `Namespace`\n2. Component which can't be created within a Namespace\n\t* `Persistence volume` and `Node` can't be created within a Namespace. They live globally in a cluster and can't be isolated\n\n```\n1. kubectl api-resources --namespaced=false\n* It will list all the components that are not bound to namespace\n\n2. kubectl api-resources --namespaced=true\n* It will list all the components that are bound to namespace\n```\n\n\n# How to create Component in a Namespace\n\n1. creating namespace first\n\n```\n1. kubectl create namespace my-namespace\n* It will create the namespace in cluster\n\n2. kubectl get namespace\n* it will list the namespaces present in cluster\n```\n\n2. creating Kubernetes component inside namespace\n\t* By default components are made inside `default Namespace` \n\t* let's make in custom namespace\n\n```\n1. kubectl apply -f mysql-configmap.yaml --namespace=my-namespace\n\nWe can do using command line this will create mysql-configmap inside my-namespace.\n*** It is recommended to make add components in namespace using configfile ***\n```\n\nMaking component inside namespace using configuration file\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n\tname: mongodb-configmap\n\tnamespace: my-namespace\ndata: \n\tdb_url: mongodb-service.database\n  \n```\n\n* just need to add `namespace attribute` and `namespace name` inside configuration file\n\n# How to get component inside namespace\n```\n1. kubectl get configmap --n my-namespace\n* Give the component that are inside my-namespace Namespace\n\n2. kubectl get configmap\n* Give the component that are inside the default Namespace\n\n3. kubectl get configmap -n default\n****** Step 2 and step 3 command do the same *******\n```","x":1160,"y":-240,"width":940,"height":1600,"color":"5"},
		{"id":"3f2f1f21f5b60a46","x":280,"y":-1000,"width":1240,"height":585,"color":"4","type":"text","text":"# How change default Namespace and make custom Namespace as default Namespace\n\n* `Kubernetes` and `kubectl` don't have any solution do that we need external package to do that which `kubens`\n\n##### let's install it in mac\n\n```\n1. brew install kubectx\n\n*** kubectx contain the kubens package inside it ***\n```\n\n```\n1. kubens \n\n* This will list the all the Namespaces *\n\n2. kubens <namespace-name>\n\t* kubens my-namespace\n\n*** This will make my-namespace as default Namespace ***\n```"},
		{"id":"40328c2490bcc057","type":"text","text":"# Kubernetes Namespaces Explained","x":-10,"y":-360,"width":580,"height":80,"color":"3"}
	],
	"edges":[]
}